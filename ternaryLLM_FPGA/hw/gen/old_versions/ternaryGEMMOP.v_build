// Generator : SpinalHDL v1.12.0    git head : 1aa7d7b5732f11cca2dd83bacc2a4cb92ca8e5c9
// Component : ternaryGEMMOP
// Git hash  : 1a31c2b39398804c316c8eca670332ca7df5ea09

`timescale 1ns/1ps

module ternaryGEMMOP (
  input  wire          io_axi_ctrl_aw_valid,
  output wire          io_axi_ctrl_aw_ready,
  input  wire [63:0]   io_axi_ctrl_aw_payload_addr,
  input  wire [2:0]    io_axi_ctrl_aw_payload_prot,
  input  wire          io_axi_ctrl_w_valid,
  output wire          io_axi_ctrl_w_ready,
  input  wire [63:0]   io_axi_ctrl_w_payload_data,
  input  wire [7:0]    io_axi_ctrl_w_payload_strb,
  output wire          io_axi_ctrl_b_valid,
  input  wire          io_axi_ctrl_b_ready,
  output wire [1:0]    io_axi_ctrl_b_payload_resp,
  input  wire          io_axi_ctrl_ar_valid,
  output wire          io_axi_ctrl_ar_ready,
  input  wire [63:0]   io_axi_ctrl_ar_payload_addr,
  input  wire [2:0]    io_axi_ctrl_ar_payload_prot,
  output wire          io_axi_ctrl_r_valid,
  input  wire          io_axi_ctrl_r_ready,
  output wire [63:0]   io_axi_ctrl_r_payload_data,
  output wire [1:0]    io_axi_ctrl_r_payload_resp,
  output wire          io_sq_rd_valid,
  input  wire          io_sq_rd_ready,
  output wire [4:0]    io_sq_rd_payload_opcode,
  output wire [1:0]    io_sq_rd_payload_strm,
  output wire          io_sq_rd_payload_mode,
  output wire          io_sq_rd_payload_rdma,
  output wire          io_sq_rd_payload_remote,
  output wire [3:0]    io_sq_rd_payload_vfid,
  output wire [5:0]    io_sq_rd_payload_pid,
  output wire [3:0]    io_sq_rd_payload_dest,
  output wire          io_sq_rd_payload_last,
  output wire [47:0]   io_sq_rd_payload_vaddr,
  output wire [27:0]   io_sq_rd_payload_len,
  output wire          io_sq_rd_payload_actv,
  output wire          io_sq_rd_payload_host,
  output wire [5:0]    io_sq_rd_payload_offs,
  output wire [18:0]   io_sq_rd_payload_rsrvd,
  output wire          io_sq_wr_valid,
  input  wire          io_sq_wr_ready,
  output wire [4:0]    io_sq_wr_payload_opcode,
  output wire [1:0]    io_sq_wr_payload_strm,
  output wire          io_sq_wr_payload_mode,
  output wire          io_sq_wr_payload_rdma,
  output wire          io_sq_wr_payload_remote,
  output wire [3:0]    io_sq_wr_payload_vfid,
  output wire [5:0]    io_sq_wr_payload_pid,
  output wire [3:0]    io_sq_wr_payload_dest,
  output wire          io_sq_wr_payload_last,
  output wire [47:0]   io_sq_wr_payload_vaddr,
  output wire [27:0]   io_sq_wr_payload_len,
  output wire          io_sq_wr_payload_actv,
  output wire          io_sq_wr_payload_host,
  output wire [5:0]    io_sq_wr_payload_offs,
  output wire [18:0]   io_sq_wr_payload_rsrvd,
  input  wire          io_cq_rd_valid,
  output wire          io_cq_rd_ready,
  input  wire [4:0]    io_cq_rd_payload_opcode,
  input  wire [1:0]    io_cq_rd_payload_strm,
  input  wire          io_cq_rd_payload_remote,
  input  wire          io_cq_rd_payload_host,
  input  wire [3:0]    io_cq_rd_payload_dest,
  input  wire [5:0]    io_cq_rd_payload_pid,
  input  wire [3:0]    io_cq_rd_payload_vfid,
  input  wire [8:0]    io_cq_rd_payload_rsrvd,
  input  wire          io_cq_wr_valid,
  output wire          io_cq_wr_ready,
  input  wire [4:0]    io_cq_wr_payload_opcode,
  input  wire [1:0]    io_cq_wr_payload_strm,
  input  wire          io_cq_wr_payload_remote,
  input  wire          io_cq_wr_payload_host,
  input  wire [3:0]    io_cq_wr_payload_dest,
  input  wire [5:0]    io_cq_wr_payload_pid,
  input  wire [3:0]    io_cq_wr_payload_vfid,
  input  wire [8:0]    io_cq_wr_payload_rsrvd,
  input  wire [511:0]  io_axis_card_recv_tdata,
  input  wire [63:0]   io_axis_card_recv_tkeep,
  input  wire [5:0]    io_axis_card_recv_tid,
  input  wire          io_axis_card_recv_tlast,
  input  wire          io_axis_card_recv_tvalid,
  output wire          io_axis_card_recv_tready,
  output wire [511:0]  io_axis_card_send_tdata,
  output wire [63:0]   io_axis_card_send_tkeep,
  output wire [5:0]    io_axis_card_send_tid,
  output wire          io_axis_card_send_tlast,
  output wire          io_axis_card_send_tvalid,
  input  wire          io_axis_card_send_tready,
  output wire [3:0]    io_dataFSM_state_Reg, //DEBUG
  output wire          io_start,  // DEBUG
  output wire          io_done,   // DEBUG
  input  wire          clk,
  input  wire          resetn
);

  wire                TopLevel_io_done;
  wire                TopLevel_io_sq_rd_valid;
  wire       [4:0]    TopLevel_io_sq_rd_payload_opcode;
  wire       [1:0]    TopLevel_io_sq_rd_payload_strm;
  wire                TopLevel_io_sq_rd_payload_mode;
  wire                TopLevel_io_sq_rd_payload_rdma;
  wire                TopLevel_io_sq_rd_payload_remote;
  wire       [3:0]    TopLevel_io_sq_rd_payload_vfid;
  wire       [5:0]    TopLevel_io_sq_rd_payload_pid;
  wire       [3:0]    TopLevel_io_sq_rd_payload_dest;
  wire                TopLevel_io_sq_rd_payload_last;
  wire       [47:0]   TopLevel_io_sq_rd_payload_vaddr;
  wire       [27:0]   TopLevel_io_sq_rd_payload_len;
  wire                TopLevel_io_sq_rd_payload_actv;
  wire                TopLevel_io_sq_rd_payload_host;
  wire       [5:0]    TopLevel_io_sq_rd_payload_offs;
  wire       [18:0]   TopLevel_io_sq_rd_payload_rsrvd;
  wire                TopLevel_io_sq_wr_valid;
  wire       [4:0]    TopLevel_io_sq_wr_payload_opcode;
  wire       [1:0]    TopLevel_io_sq_wr_payload_strm;
  wire                TopLevel_io_sq_wr_payload_mode;
  wire                TopLevel_io_sq_wr_payload_rdma;
  wire                TopLevel_io_sq_wr_payload_remote;
  wire       [3:0]    TopLevel_io_sq_wr_payload_vfid;
  wire       [5:0]    TopLevel_io_sq_wr_payload_pid;
  wire       [3:0]    TopLevel_io_sq_wr_payload_dest;
  wire                TopLevel_io_sq_wr_payload_last;
  wire       [47:0]   TopLevel_io_sq_wr_payload_vaddr;
  wire       [27:0]   TopLevel_io_sq_wr_payload_len;
  wire                TopLevel_io_sq_wr_payload_actv;
  wire                TopLevel_io_sq_wr_payload_host;
  wire       [5:0]    TopLevel_io_sq_wr_payload_offs;
  wire       [18:0]   TopLevel_io_sq_wr_payload_rsrvd;
  wire                TopLevel_io_cq_rd_ready;
  wire                TopLevel_io_cq_wr_ready;
  wire                TopLevel_io_axis_card_recv_tready;
  wire       [511:0]  TopLevel_io_axis_card_send_tdata;
  wire       [63:0]   TopLevel_io_axis_card_send_tkeep;
  wire       [5:0]    TopLevel_io_axis_card_send_tid;
  wire                TopLevel_io_axis_card_send_tlast;
  wire                TopLevel_io_axis_card_send_tvalid;
  wire                ctrlR_readErrorFlag;
  wire                ctrlR_writeErrorFlag;
  wire                ctrlR_readHaltRequest;
  wire                ctrlR_writeHaltRequest;
  wire                ctrlR_writeJoinEvent_valid;
  wire                ctrlR_writeJoinEvent_ready;
  wire                ctrlR_writeOccur;
  reg        [1:0]    ctrlR_writeRsp_resp;
  wire                ctrlR_writeJoinEvent_translated_valid;
  wire                ctrlR_writeJoinEvent_translated_ready;
  wire       [1:0]    ctrlR_writeJoinEvent_translated_payload_resp;
  wire                _zz_ctrlR_writeJoinEvent_translated_ready;
  wire                ctrlR_writeJoinEvent_translated_haltWhen_valid;
  wire                ctrlR_writeJoinEvent_translated_haltWhen_ready;
  wire       [1:0]    ctrlR_writeJoinEvent_translated_haltWhen_payload_resp;
  wire                ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_valid;
  wire                ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_ready;
  wire       [1:0]    ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_payload_resp;
  reg                 ctrlR_writeJoinEvent_translated_haltWhen_rValid;
  wire                ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_fire;
  reg        [1:0]    ctrlR_writeJoinEvent_translated_haltWhen_rData_resp;
  wire                ctrlR_readDataStage_valid;
  wire                ctrlR_readDataStage_ready;
  wire       [63:0]   ctrlR_readDataStage_payload_addr;
  wire       [2:0]    ctrlR_readDataStage_payload_prot;
  reg                 io_axi_ctrl_ar_rValid;
  wire                ctrlR_readDataStage_fire;
  reg        [63:0]   io_axi_ctrl_ar_rData_addr;
  reg        [2:0]    io_axi_ctrl_ar_rData_prot;
  reg        [63:0]   ctrlR_readRsp_data;
  reg        [1:0]    ctrlR_readRsp_resp;
  wire                _zz_ctrlR_readDataStage_ready;
  wire                ctrlR_readDataStage_haltWhen_valid;
  wire                ctrlR_readDataStage_haltWhen_ready;
  wire       [63:0]   ctrlR_readDataStage_haltWhen_payload_addr;
  wire       [2:0]    ctrlR_readDataStage_haltWhen_payload_prot;
  wire                ctrlR_readDataStage_haltWhen_translated_valid;
  wire                ctrlR_readDataStage_haltWhen_translated_ready;
  wire       [63:0]   ctrlR_readDataStage_haltWhen_translated_payload_data;
  wire       [1:0]    ctrlR_readDataStage_haltWhen_translated_payload_resp;
  wire       [63:0]   ctrlR_readAddressMasked;
  wire       [63:0]   ctrlR_writeAddressMasked;
  wire                ctrlR_readOccur;
  reg        [15:0]   input_M;
  reg        [15:0]   input_N;
  reg        [15:0]   input_K;
  reg        [15:0]   input_Nz_values_Kslice;
  reg                 input_start;
  reg        [63:0]   input_base_addr_X;
  reg        [63:0]   input_base_addr_W;
  reg        [63:0]   input_base_addr_Y;
  reg                 finished;
  wire                when_BusSlaveFactory_l1043;
  wire                when_BusSlaveFactory_l1043_1;
  wire                when_BusSlaveFactory_l1043_2;
  wire                when_BusSlaveFactory_l1043_3;
  wire                when_BusSlaveFactory_l1043_4;
  wire                when_BusSlaveFactory_l1043_5;
  wire                when_BusSlaveFactory_l1043_6;
  wire                when_BusSlaveFactory_l1043_7;
  wire                when_BusSlaveFactory_l1043_8;
  wire                when_BusSlaveFactory_l1043_9;
  wire                when_BusSlaveFactory_l1043_10;
  wire                when_BusSlaveFactory_l1043_11;
  wire                when_BusSlaveFactory_l1043_12;
  wire                when_BusSlaveFactory_l1043_13;
  wire                when_BusSlaveFactory_l1043_14;
  wire                when_BusSlaveFactory_l1043_15;
  wire                when_BusSlaveFactory_l1043_16;
  wire                when_BusSlaveFactory_l1043_17;
  wire                when_BusSlaveFactory_l1043_18;
  wire                when_BusSlaveFactory_l1043_19;
  wire                when_BusSlaveFactory_l1043_20;
  wire                when_BusSlaveFactory_l1043_21;
  wire                when_BusSlaveFactory_l1043_22;
  wire                when_BusSlaveFactory_l1043_23;
  wire                when_BusSlaveFactory_l1043_24;
  wire                when_BusSlaveFactory_l1043_25;
  wire                when_BusSlaveFactory_l1043_26;
  wire                when_BusSlaveFactory_l1043_27;
  wire                when_BusSlaveFactory_l1043_28;
  wire                when_BusSlaveFactory_l1043_29;
  wire                when_BusSlaveFactory_l1043_30;
  wire                when_BusSlaveFactory_l1043_31;
  wire                when_BusSlaveFactory_l1043_32;

  TopLevel_new TopLevel (
    .io_start                 (input_start                            ), //i
    .io_done                  (TopLevel_io_done                       ), //o
    .io_M                     (input_M[15:0]                          ), //i
    .io_N                     (input_N[15:0]                          ), //i
    .io_K                     (input_K[15:0]                          ), //i
    .io_Non_zero_per_K_slice  (input_Nz_values_Kslice[15:0]           ), //i
    .io_base_addr_X           (input_base_addr_X[63:0]                ), //i
    .io_base_addr_W           (input_base_addr_W[63:0]                ), //i
    .io_base_addr_Y           (input_base_addr_Y[63:0]                ), //i
    .io_sq_rd_valid           (TopLevel_io_sq_rd_valid                ), //o
    .io_sq_rd_ready           (io_sq_rd_ready                         ), //i
    .io_sq_rd_payload_opcode  (TopLevel_io_sq_rd_payload_opcode[4:0]  ), //o
    .io_sq_rd_payload_strm    (TopLevel_io_sq_rd_payload_strm[1:0]    ), //o
    .io_sq_rd_payload_mode    (TopLevel_io_sq_rd_payload_mode         ), //o
    .io_sq_rd_payload_rdma    (TopLevel_io_sq_rd_payload_rdma         ), //o
    .io_sq_rd_payload_remote  (TopLevel_io_sq_rd_payload_remote       ), //o
    .io_sq_rd_payload_vfid    (TopLevel_io_sq_rd_payload_vfid[3:0]    ), //o
    .io_sq_rd_payload_pid     (TopLevel_io_sq_rd_payload_pid[5:0]     ), //o
    .io_sq_rd_payload_dest    (TopLevel_io_sq_rd_payload_dest[3:0]    ), //o
    .io_sq_rd_payload_last    (TopLevel_io_sq_rd_payload_last         ), //o
    .io_sq_rd_payload_vaddr   (TopLevel_io_sq_rd_payload_vaddr[47:0]  ), //o
    .io_sq_rd_payload_len     (TopLevel_io_sq_rd_payload_len[27:0]    ), //o
    .io_sq_rd_payload_actv    (TopLevel_io_sq_rd_payload_actv         ), //o
    .io_sq_rd_payload_host    (TopLevel_io_sq_rd_payload_host         ), //o
    .io_sq_rd_payload_offs    (TopLevel_io_sq_rd_payload_offs[5:0]    ), //o
    .io_sq_rd_payload_rsrvd   (TopLevel_io_sq_rd_payload_rsrvd[18:0]  ), //o
    .io_sq_wr_valid           (TopLevel_io_sq_wr_valid                ), //o
    .io_sq_wr_ready           (io_sq_wr_ready                         ), //i
    .io_sq_wr_payload_opcode  (TopLevel_io_sq_wr_payload_opcode[4:0]  ), //o
    .io_sq_wr_payload_strm    (TopLevel_io_sq_wr_payload_strm[1:0]    ), //o
    .io_sq_wr_payload_mode    (TopLevel_io_sq_wr_payload_mode         ), //o
    .io_sq_wr_payload_rdma    (TopLevel_io_sq_wr_payload_rdma         ), //o
    .io_sq_wr_payload_remote  (TopLevel_io_sq_wr_payload_remote       ), //o
    .io_sq_wr_payload_vfid    (TopLevel_io_sq_wr_payload_vfid[3:0]    ), //o
    .io_sq_wr_payload_pid     (TopLevel_io_sq_wr_payload_pid[5:0]     ), //o
    .io_sq_wr_payload_dest    (TopLevel_io_sq_wr_payload_dest[3:0]    ), //o
    .io_sq_wr_payload_last    (TopLevel_io_sq_wr_payload_last         ), //o
    .io_sq_wr_payload_vaddr   (TopLevel_io_sq_wr_payload_vaddr[47:0]  ), //o
    .io_sq_wr_payload_len     (TopLevel_io_sq_wr_payload_len[27:0]    ), //o
    .io_sq_wr_payload_actv    (TopLevel_io_sq_wr_payload_actv         ), //o
    .io_sq_wr_payload_host    (TopLevel_io_sq_wr_payload_host         ), //o
    .io_sq_wr_payload_offs    (TopLevel_io_sq_wr_payload_offs[5:0]    ), //o
    .io_sq_wr_payload_rsrvd   (TopLevel_io_sq_wr_payload_rsrvd[18:0]  ), //o
    .io_cq_rd_valid           (io_cq_rd_valid                         ), //i
    .io_cq_rd_ready           (TopLevel_io_cq_rd_ready                ), //o
    .io_cq_rd_payload_opcode  (io_cq_rd_payload_opcode[4:0]           ), //i
    .io_cq_rd_payload_strm    (io_cq_rd_payload_strm[1:0]             ), //i
    .io_cq_rd_payload_remote  (io_cq_rd_payload_remote                ), //i
    .io_cq_rd_payload_host    (io_cq_rd_payload_host                  ), //i
    .io_cq_rd_payload_dest    (io_cq_rd_payload_dest[3:0]             ), //i
    .io_cq_rd_payload_pid     (io_cq_rd_payload_pid[5:0]              ), //i
    .io_cq_rd_payload_vfid    (io_cq_rd_payload_vfid[3:0]             ), //i
    .io_cq_rd_payload_rsrvd   (io_cq_rd_payload_rsrvd[8:0]            ), //i
    .io_cq_wr_valid           (io_cq_wr_valid                         ), //i
    .io_cq_wr_ready           (TopLevel_io_cq_wr_ready                ), //o
    .io_cq_wr_payload_opcode  (io_cq_wr_payload_opcode[4:0]           ), //i
    .io_cq_wr_payload_strm    (io_cq_wr_payload_strm[1:0]             ), //i
    .io_cq_wr_payload_remote  (io_cq_wr_payload_remote                ), //i
    .io_cq_wr_payload_host    (io_cq_wr_payload_host                  ), //i
    .io_cq_wr_payload_dest    (io_cq_wr_payload_dest[3:0]             ), //i
    .io_cq_wr_payload_pid     (io_cq_wr_payload_pid[5:0]              ), //i
    .io_cq_wr_payload_vfid    (io_cq_wr_payload_vfid[3:0]             ), //i
    .io_cq_wr_payload_rsrvd   (io_cq_wr_payload_rsrvd[8:0]            ), //i
    .io_axis_card_recv_tdata  (io_axis_card_recv_tdata[511:0]         ), //i
    .io_axis_card_recv_tkeep  (io_axis_card_recv_tkeep[63:0]          ), //i
    .io_axis_card_recv_tid    (io_axis_card_recv_tid[5:0]             ), //i
    .io_axis_card_recv_tlast  (io_axis_card_recv_tlast                ), //i
    .io_axis_card_recv_tvalid (io_axis_card_recv_tvalid               ), //i
    .io_axis_card_recv_tready (TopLevel_io_axis_card_recv_tready      ), //o
    .io_axis_card_send_tdata  (TopLevel_io_axis_card_send_tdata[511:0]), //o
    .io_axis_card_send_tkeep  (TopLevel_io_axis_card_send_tkeep[63:0] ), //o
    .io_axis_card_send_tid    (TopLevel_io_axis_card_send_tid[5:0]    ), //o
    .io_axis_card_send_tlast  (TopLevel_io_axis_card_send_tlast       ), //o
    .io_axis_card_send_tvalid (TopLevel_io_axis_card_send_tvalid      ), //o
    .io_axis_card_send_tready (io_axis_card_send_tready               ), //i
    .io_dataFSM_state_Reg     (io_dataFSM_state_Reg                   ), // DEBUG
    .clk                      (clk                                    ), //i
    .resetn                   (resetn                                 )  //i
  );
  assign io_start = input_start; // DEBUG
  assign io_done  = TopLevel_io_done; // DEBUG
  assign ctrlR_readErrorFlag = 1'b0;
  assign ctrlR_writeErrorFlag = 1'b0;
  assign ctrlR_readHaltRequest = 1'b0;
  assign ctrlR_writeHaltRequest = 1'b0;
  assign ctrlR_writeOccur = (ctrlR_writeJoinEvent_valid && ctrlR_writeJoinEvent_ready);
  assign ctrlR_writeJoinEvent_valid = (io_axi_ctrl_aw_valid && io_axi_ctrl_w_valid);
  assign io_axi_ctrl_aw_ready = ctrlR_writeOccur;
  assign io_axi_ctrl_w_ready = ctrlR_writeOccur;
  assign ctrlR_writeJoinEvent_translated_valid = ctrlR_writeJoinEvent_valid;
  assign ctrlR_writeJoinEvent_ready = ctrlR_writeJoinEvent_translated_ready;
  assign ctrlR_writeJoinEvent_translated_payload_resp = ctrlR_writeRsp_resp;
  assign _zz_ctrlR_writeJoinEvent_translated_ready = (! ctrlR_writeHaltRequest);
  assign ctrlR_writeJoinEvent_translated_haltWhen_valid = (ctrlR_writeJoinEvent_translated_valid && _zz_ctrlR_writeJoinEvent_translated_ready);
  assign ctrlR_writeJoinEvent_translated_ready = (ctrlR_writeJoinEvent_translated_haltWhen_ready && _zz_ctrlR_writeJoinEvent_translated_ready);
  assign ctrlR_writeJoinEvent_translated_haltWhen_payload_resp = ctrlR_writeJoinEvent_translated_payload_resp;
  assign ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_fire = (ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_valid && ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_ready);
  assign ctrlR_writeJoinEvent_translated_haltWhen_ready = (! ctrlR_writeJoinEvent_translated_haltWhen_rValid);
  assign ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_valid = ctrlR_writeJoinEvent_translated_haltWhen_rValid;
  assign ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_payload_resp = ctrlR_writeJoinEvent_translated_haltWhen_rData_resp;
  assign io_axi_ctrl_b_valid = ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_valid;
  assign ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_ready = io_axi_ctrl_b_ready;
  assign io_axi_ctrl_b_payload_resp = ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_payload_resp;
  assign ctrlR_readDataStage_fire = (ctrlR_readDataStage_valid && ctrlR_readDataStage_ready);
  assign io_axi_ctrl_ar_ready = (! io_axi_ctrl_ar_rValid);
  assign ctrlR_readDataStage_valid = io_axi_ctrl_ar_rValid;
  assign ctrlR_readDataStage_payload_addr = io_axi_ctrl_ar_rData_addr;
  assign ctrlR_readDataStage_payload_prot = io_axi_ctrl_ar_rData_prot;
  assign _zz_ctrlR_readDataStage_ready = (! ctrlR_readHaltRequest);
  assign ctrlR_readDataStage_haltWhen_valid = (ctrlR_readDataStage_valid && _zz_ctrlR_readDataStage_ready);
  assign ctrlR_readDataStage_ready = (ctrlR_readDataStage_haltWhen_ready && _zz_ctrlR_readDataStage_ready);
  assign ctrlR_readDataStage_haltWhen_payload_addr = ctrlR_readDataStage_payload_addr;
  assign ctrlR_readDataStage_haltWhen_payload_prot = ctrlR_readDataStage_payload_prot;
  assign ctrlR_readDataStage_haltWhen_translated_valid = ctrlR_readDataStage_haltWhen_valid;
  assign ctrlR_readDataStage_haltWhen_ready = ctrlR_readDataStage_haltWhen_translated_ready;
  assign ctrlR_readDataStage_haltWhen_translated_payload_data = ctrlR_readRsp_data;
  assign ctrlR_readDataStage_haltWhen_translated_payload_resp = ctrlR_readRsp_resp;
  assign io_axi_ctrl_r_valid = ctrlR_readDataStage_haltWhen_translated_valid;
  assign ctrlR_readDataStage_haltWhen_translated_ready = io_axi_ctrl_r_ready;
  assign io_axi_ctrl_r_payload_data = ctrlR_readDataStage_haltWhen_translated_payload_data;
  assign io_axi_ctrl_r_payload_resp = ctrlR_readDataStage_haltWhen_translated_payload_resp;
  always @(*) begin
    if(ctrlR_writeErrorFlag) begin
      ctrlR_writeRsp_resp = 2'b10;
    end else begin
      ctrlR_writeRsp_resp = 2'b00;
    end
  end

  always @(*) begin
    if(ctrlR_readErrorFlag) begin
      ctrlR_readRsp_resp = 2'b10;
    end else begin
      ctrlR_readRsp_resp = 2'b00;
    end
  end

  always @(*) begin
    ctrlR_readRsp_data = 64'h0;
    case(ctrlR_readAddressMasked)
      64'h0 : begin
        ctrlR_readRsp_data[15 : 0] = input_M;
      end
      64'h0000000000000008 : begin
        ctrlR_readRsp_data[15 : 0] = input_N;
      end
      64'h0000000000000010 : begin
        ctrlR_readRsp_data[15 : 0] = input_K;
      end
      64'h0000000000000018 : begin
        ctrlR_readRsp_data[15 : 0] = input_Nz_values_Kslice;
      end
      64'h0000000000000020 : begin
        ctrlR_readRsp_data[0 : 0] = input_start;
      end
      64'h0000000000000028 : begin
        ctrlR_readRsp_data[63 : 0] = input_base_addr_X;
      end
      64'h0000000000000030 : begin
        ctrlR_readRsp_data[63 : 0] = input_base_addr_W;
      end
      64'h0000000000000038 : begin
        ctrlR_readRsp_data[63 : 0] = input_base_addr_Y;
      end
      64'h0000000000000040 : begin
        ctrlR_readRsp_data[0 : 0] = finished;
      end
      default : begin
      end
    endcase
  end

  assign ctrlR_readAddressMasked = (ctrlR_readDataStage_payload_addr & (64'h00000000000000FF));
  assign ctrlR_writeAddressMasked = (io_axi_ctrl_aw_payload_addr & (64'h00000000000000FF));
  assign ctrlR_readOccur = (io_axi_ctrl_r_valid && io_axi_ctrl_r_ready);
  assign io_sq_rd_valid = TopLevel_io_sq_rd_valid;
  assign io_sq_rd_payload_opcode = TopLevel_io_sq_rd_payload_opcode;
  assign io_sq_rd_payload_strm = TopLevel_io_sq_rd_payload_strm;
  assign io_sq_rd_payload_mode = TopLevel_io_sq_rd_payload_mode;
  assign io_sq_rd_payload_rdma = TopLevel_io_sq_rd_payload_rdma;
  assign io_sq_rd_payload_remote = TopLevel_io_sq_rd_payload_remote;
  assign io_sq_rd_payload_vfid = TopLevel_io_sq_rd_payload_vfid;
  assign io_sq_rd_payload_pid = TopLevel_io_sq_rd_payload_pid;
  assign io_sq_rd_payload_dest = TopLevel_io_sq_rd_payload_dest;
  assign io_sq_rd_payload_last = TopLevel_io_sq_rd_payload_last;
  assign io_sq_rd_payload_vaddr = TopLevel_io_sq_rd_payload_vaddr;
  assign io_sq_rd_payload_len = TopLevel_io_sq_rd_payload_len;
  assign io_sq_rd_payload_actv = TopLevel_io_sq_rd_payload_actv;
  assign io_sq_rd_payload_host = TopLevel_io_sq_rd_payload_host;
  assign io_sq_rd_payload_offs = TopLevel_io_sq_rd_payload_offs;
  assign io_sq_rd_payload_rsrvd = TopLevel_io_sq_rd_payload_rsrvd;
  assign io_sq_wr_valid = TopLevel_io_sq_wr_valid;
  assign io_sq_wr_payload_opcode = TopLevel_io_sq_wr_payload_opcode;
  assign io_sq_wr_payload_strm = TopLevel_io_sq_wr_payload_strm;
  assign io_sq_wr_payload_mode = TopLevel_io_sq_wr_payload_mode;
  assign io_sq_wr_payload_rdma = TopLevel_io_sq_wr_payload_rdma;
  assign io_sq_wr_payload_remote = TopLevel_io_sq_wr_payload_remote;
  assign io_sq_wr_payload_vfid = TopLevel_io_sq_wr_payload_vfid;
  assign io_sq_wr_payload_pid = TopLevel_io_sq_wr_payload_pid;
  assign io_sq_wr_payload_dest = TopLevel_io_sq_wr_payload_dest;
  assign io_sq_wr_payload_last = TopLevel_io_sq_wr_payload_last;
  assign io_sq_wr_payload_vaddr = TopLevel_io_sq_wr_payload_vaddr;
  assign io_sq_wr_payload_len = TopLevel_io_sq_wr_payload_len;
  assign io_sq_wr_payload_actv = TopLevel_io_sq_wr_payload_actv;
  assign io_sq_wr_payload_host = TopLevel_io_sq_wr_payload_host;
  assign io_sq_wr_payload_offs = TopLevel_io_sq_wr_payload_offs;
  assign io_sq_wr_payload_rsrvd = TopLevel_io_sq_wr_payload_rsrvd;
  assign io_cq_rd_ready = TopLevel_io_cq_rd_ready;
  assign io_cq_wr_ready = TopLevel_io_cq_wr_ready;
  assign io_axis_card_recv_tready = TopLevel_io_axis_card_recv_tready;
  assign io_axis_card_send_tdata = TopLevel_io_axis_card_send_tdata;
  assign io_axis_card_send_tkeep = TopLevel_io_axis_card_send_tkeep;
  assign io_axis_card_send_tid = TopLevel_io_axis_card_send_tid;
  assign io_axis_card_send_tlast = TopLevel_io_axis_card_send_tlast;
  assign io_axis_card_send_tvalid = TopLevel_io_axis_card_send_tvalid;
  assign when_BusSlaveFactory_l1043 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_1 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_2 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_3 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_4 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_5 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_6 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_7 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_8 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_9 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_10 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_11 = io_axi_ctrl_w_payload_strb[2];
  assign when_BusSlaveFactory_l1043_12 = io_axi_ctrl_w_payload_strb[3];
  assign when_BusSlaveFactory_l1043_13 = io_axi_ctrl_w_payload_strb[4];
  assign when_BusSlaveFactory_l1043_14 = io_axi_ctrl_w_payload_strb[5];
  assign when_BusSlaveFactory_l1043_15 = io_axi_ctrl_w_payload_strb[6];
  assign when_BusSlaveFactory_l1043_16 = io_axi_ctrl_w_payload_strb[7];
  assign when_BusSlaveFactory_l1043_17 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_18 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_19 = io_axi_ctrl_w_payload_strb[2];
  assign when_BusSlaveFactory_l1043_20 = io_axi_ctrl_w_payload_strb[3];
  assign when_BusSlaveFactory_l1043_21 = io_axi_ctrl_w_payload_strb[4];
  assign when_BusSlaveFactory_l1043_22 = io_axi_ctrl_w_payload_strb[5];
  assign when_BusSlaveFactory_l1043_23 = io_axi_ctrl_w_payload_strb[6];
  assign when_BusSlaveFactory_l1043_24 = io_axi_ctrl_w_payload_strb[7];
  assign when_BusSlaveFactory_l1043_25 = io_axi_ctrl_w_payload_strb[0];
  assign when_BusSlaveFactory_l1043_26 = io_axi_ctrl_w_payload_strb[1];
  assign when_BusSlaveFactory_l1043_27 = io_axi_ctrl_w_payload_strb[2];
  assign when_BusSlaveFactory_l1043_28 = io_axi_ctrl_w_payload_strb[3];
  assign when_BusSlaveFactory_l1043_29 = io_axi_ctrl_w_payload_strb[4];
  assign when_BusSlaveFactory_l1043_30 = io_axi_ctrl_w_payload_strb[5];
  assign when_BusSlaveFactory_l1043_31 = io_axi_ctrl_w_payload_strb[6];
  assign when_BusSlaveFactory_l1043_32 = io_axi_ctrl_w_payload_strb[7];
  always @(posedge clk) begin
    if(!resetn) begin
      ctrlR_writeJoinEvent_translated_haltWhen_rValid <= 1'b0;
      io_axi_ctrl_ar_rValid <= 1'b0;
    end else begin
      if(ctrlR_writeJoinEvent_translated_haltWhen_valid) begin
        ctrlR_writeJoinEvent_translated_haltWhen_rValid <= 1'b1;
      end
      if(ctrlR_writeJoinEvent_translated_haltWhen_halfPipe_fire) begin
        ctrlR_writeJoinEvent_translated_haltWhen_rValid <= 1'b0;
      end
      if(io_axi_ctrl_ar_valid) begin
        io_axi_ctrl_ar_rValid <= 1'b1;
      end
      if(ctrlR_readDataStage_fire) begin
        io_axi_ctrl_ar_rValid <= 1'b0;
      end
    end
  end

  always @(posedge clk) begin
    if(ctrlR_writeJoinEvent_translated_haltWhen_ready) begin
      ctrlR_writeJoinEvent_translated_haltWhen_rData_resp <= ctrlR_writeJoinEvent_translated_haltWhen_payload_resp;
    end
    if(io_axi_ctrl_ar_ready) begin
      io_axi_ctrl_ar_rData_addr <= io_axi_ctrl_ar_payload_addr;
      io_axi_ctrl_ar_rData_prot <= io_axi_ctrl_ar_payload_prot;
    end
    finished <= TopLevel_io_done;
    case(ctrlR_writeAddressMasked)
      64'h0 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043) begin
            input_M[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_1) begin
            input_M[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
        end
      end
      64'h0000000000000008 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_2) begin
            input_N[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_3) begin
            input_N[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
        end
      end
      64'h0000000000000010 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_4) begin
            input_K[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_5) begin
            input_K[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
        end
      end
      64'h0000000000000018 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_6) begin
            input_Nz_values_Kslice[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_7) begin
            input_Nz_values_Kslice[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
        end
      end
      64'h0000000000000020 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_8) begin
            input_start <= io_axi_ctrl_w_payload_data[0];
          end
        end
      end
      64'h0000000000000028 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_9) begin
            input_base_addr_X[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_10) begin
            input_base_addr_X[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
          if(when_BusSlaveFactory_l1043_11) begin
            input_base_addr_X[23 : 16] <= io_axi_ctrl_w_payload_data[23 : 16];
          end
          if(when_BusSlaveFactory_l1043_12) begin
            input_base_addr_X[31 : 24] <= io_axi_ctrl_w_payload_data[31 : 24];
          end
          if(when_BusSlaveFactory_l1043_13) begin
            input_base_addr_X[39 : 32] <= io_axi_ctrl_w_payload_data[39 : 32];
          end
          if(when_BusSlaveFactory_l1043_14) begin
            input_base_addr_X[47 : 40] <= io_axi_ctrl_w_payload_data[47 : 40];
          end
          if(when_BusSlaveFactory_l1043_15) begin
            input_base_addr_X[55 : 48] <= io_axi_ctrl_w_payload_data[55 : 48];
          end
          if(when_BusSlaveFactory_l1043_16) begin
            input_base_addr_X[63 : 56] <= io_axi_ctrl_w_payload_data[63 : 56];
          end
        end
      end
      64'h0000000000000030 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_17) begin
            input_base_addr_W[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_18) begin
            input_base_addr_W[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
          if(when_BusSlaveFactory_l1043_19) begin
            input_base_addr_W[23 : 16] <= io_axi_ctrl_w_payload_data[23 : 16];
          end
          if(when_BusSlaveFactory_l1043_20) begin
            input_base_addr_W[31 : 24] <= io_axi_ctrl_w_payload_data[31 : 24];
          end
          if(when_BusSlaveFactory_l1043_21) begin
            input_base_addr_W[39 : 32] <= io_axi_ctrl_w_payload_data[39 : 32];
          end
          if(when_BusSlaveFactory_l1043_22) begin
            input_base_addr_W[47 : 40] <= io_axi_ctrl_w_payload_data[47 : 40];
          end
          if(when_BusSlaveFactory_l1043_23) begin
            input_base_addr_W[55 : 48] <= io_axi_ctrl_w_payload_data[55 : 48];
          end
          if(when_BusSlaveFactory_l1043_24) begin
            input_base_addr_W[63 : 56] <= io_axi_ctrl_w_payload_data[63 : 56];
          end
        end
      end
      64'h0000000000000038 : begin
        if(ctrlR_writeOccur) begin
          if(when_BusSlaveFactory_l1043_25) begin
            input_base_addr_Y[7 : 0] <= io_axi_ctrl_w_payload_data[7 : 0];
          end
          if(when_BusSlaveFactory_l1043_26) begin
            input_base_addr_Y[15 : 8] <= io_axi_ctrl_w_payload_data[15 : 8];
          end
          if(when_BusSlaveFactory_l1043_27) begin
            input_base_addr_Y[23 : 16] <= io_axi_ctrl_w_payload_data[23 : 16];
          end
          if(when_BusSlaveFactory_l1043_28) begin
            input_base_addr_Y[31 : 24] <= io_axi_ctrl_w_payload_data[31 : 24];
          end
          if(when_BusSlaveFactory_l1043_29) begin
            input_base_addr_Y[39 : 32] <= io_axi_ctrl_w_payload_data[39 : 32];
          end
          if(when_BusSlaveFactory_l1043_30) begin
            input_base_addr_Y[47 : 40] <= io_axi_ctrl_w_payload_data[47 : 40];
          end
          if(when_BusSlaveFactory_l1043_31) begin
            input_base_addr_Y[55 : 48] <= io_axi_ctrl_w_payload_data[55 : 48];
          end
          if(when_BusSlaveFactory_l1043_32) begin
            input_base_addr_Y[63 : 56] <= io_axi_ctrl_w_payload_data[63 : 56];
          end
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module TopLevel_new (
  input  wire          io_start,
  output wire          io_done,
  input  wire [15:0]   io_M,
  input  wire [15:0]   io_N,
  input  wire [15:0]   io_K,
  input  wire [15:0]   io_Non_zero_per_K_slice,
  input  wire [63:0]   io_base_addr_X,
  input  wire [63:0]   io_base_addr_W,
  input  wire [63:0]   io_base_addr_Y,
  output wire          io_sq_rd_valid,
  input  wire          io_sq_rd_ready,
  output wire [4:0]    io_sq_rd_payload_opcode,
  output wire [1:0]    io_sq_rd_payload_strm,
  output wire          io_sq_rd_payload_mode,
  output wire          io_sq_rd_payload_rdma,
  output wire          io_sq_rd_payload_remote,
  output wire [3:0]    io_sq_rd_payload_vfid,
  output wire [5:0]    io_sq_rd_payload_pid,
  output wire [3:0]    io_sq_rd_payload_dest,
  output wire          io_sq_rd_payload_last,
  output wire [47:0]   io_sq_rd_payload_vaddr,
  output wire [27:0]   io_sq_rd_payload_len,
  output wire          io_sq_rd_payload_actv,
  output wire          io_sq_rd_payload_host,
  output wire [5:0]    io_sq_rd_payload_offs,
  output wire [18:0]   io_sq_rd_payload_rsrvd,
  output wire          io_sq_wr_valid,
  input  wire          io_sq_wr_ready,
  output wire [4:0]    io_sq_wr_payload_opcode,
  output wire [1:0]    io_sq_wr_payload_strm,
  output wire          io_sq_wr_payload_mode,
  output wire          io_sq_wr_payload_rdma,
  output wire          io_sq_wr_payload_remote,
  output wire [3:0]    io_sq_wr_payload_vfid,
  output wire [5:0]    io_sq_wr_payload_pid,
  output wire [3:0]    io_sq_wr_payload_dest,
  output wire          io_sq_wr_payload_last,
  output wire [47:0]   io_sq_wr_payload_vaddr,
  output wire [27:0]   io_sq_wr_payload_len,
  output wire          io_sq_wr_payload_actv,
  output wire          io_sq_wr_payload_host,
  output wire [5:0]    io_sq_wr_payload_offs,
  output wire [18:0]   io_sq_wr_payload_rsrvd,
  input  wire          io_cq_rd_valid,
  output wire          io_cq_rd_ready,
  input  wire [4:0]    io_cq_rd_payload_opcode,
  input  wire [1:0]    io_cq_rd_payload_strm,
  input  wire          io_cq_rd_payload_remote,
  input  wire          io_cq_rd_payload_host,
  input  wire [3:0]    io_cq_rd_payload_dest,
  input  wire [5:0]    io_cq_rd_payload_pid,
  input  wire [3:0]    io_cq_rd_payload_vfid,
  input  wire [8:0]    io_cq_rd_payload_rsrvd,
  input  wire          io_cq_wr_valid,
  output wire          io_cq_wr_ready,
  input  wire [4:0]    io_cq_wr_payload_opcode,
  input  wire [1:0]    io_cq_wr_payload_strm,
  input  wire          io_cq_wr_payload_remote,
  input  wire          io_cq_wr_payload_host,
  input  wire [3:0]    io_cq_wr_payload_dest,
  input  wire [5:0]    io_cq_wr_payload_pid,
  input  wire [3:0]    io_cq_wr_payload_vfid,
  input  wire [8:0]    io_cq_wr_payload_rsrvd,
  input  wire [511:0]  io_axis_card_recv_tdata,
  input  wire [63:0]   io_axis_card_recv_tkeep,
  input  wire [5:0]    io_axis_card_recv_tid,
  input  wire          io_axis_card_recv_tlast,
  input  wire          io_axis_card_recv_tvalid,
  output wire          io_axis_card_recv_tready,
  output reg  [511:0]  io_axis_card_send_tdata,
  output wire [63:0]   io_axis_card_send_tkeep,
  output wire [5:0]    io_axis_card_send_tid,
  output wire          io_axis_card_send_tlast,
  output reg           io_axis_card_send_tvalid,
  input  wire          io_axis_card_send_tready,
  output wire [3:0]    io_dataFSM_state_Reg, // DEBUG
  input  wire          clk,
  input  wire          resetn
);

  wire                FSM_io_w_ready;
  wire                FSM_io_done_acc;
  wire                FSM_io_done;
  wire                FSM_io_sq_rd_valid;
  wire       [4:0]    FSM_io_sq_rd_payload_opcode;
  wire       [1:0]    FSM_io_sq_rd_payload_strm;
  wire                FSM_io_sq_rd_payload_mode;
  wire                FSM_io_sq_rd_payload_rdma;
  wire                FSM_io_sq_rd_payload_remote;
  wire       [3:0]    FSM_io_sq_rd_payload_vfid;
  wire       [5:0]    FSM_io_sq_rd_payload_pid;
  wire       [3:0]    FSM_io_sq_rd_payload_dest;
  wire                FSM_io_sq_rd_payload_last;
  wire       [47:0]   FSM_io_sq_rd_payload_vaddr;
  wire       [27:0]   FSM_io_sq_rd_payload_len;
  wire                FSM_io_sq_rd_payload_actv;
  wire                FSM_io_sq_rd_payload_host;
  wire       [5:0]    FSM_io_sq_rd_payload_offs;
  wire       [18:0]   FSM_io_sq_rd_payload_rsrvd;
  wire                FSM_io_sq_wr_valid;
  wire       [4:0]    FSM_io_sq_wr_payload_opcode;
  wire       [1:0]    FSM_io_sq_wr_payload_strm;
  wire                FSM_io_sq_wr_payload_mode;
  wire                FSM_io_sq_wr_payload_rdma;
  wire                FSM_io_sq_wr_payload_remote;
  wire       [3:0]    FSM_io_sq_wr_payload_vfid;
  wire       [5:0]    FSM_io_sq_wr_payload_pid;
  wire       [3:0]    FSM_io_sq_wr_payload_dest;
  wire                FSM_io_sq_wr_payload_last;
  wire       [47:0]   FSM_io_sq_wr_payload_vaddr;
  wire       [27:0]   FSM_io_sq_wr_payload_len;
  wire                FSM_io_sq_wr_payload_actv;
  wire                FSM_io_sq_wr_payload_host;
  wire       [5:0]    FSM_io_sq_wr_payload_offs;
  wire       [18:0]   FSM_io_sq_wr_payload_rsrvd;
  wire                FSM_io_cq_rd_ready;
  wire                FSM_io_cq_wr_ready;
  wire                FSM_io_axis_card_recv_tready;
  wire       [511:0]  FSM_io_x;
  wire                FSM_io_w_valid;
  wire       [511:0]  FSM_io_w_payload;
  wire       [3:0]    FSM_io_select_Y;
  wire       [7:0]    FSM_io_enable_X_0;
  wire       [7:0]    FSM_io_enable_X_1;
  wire       [7:0]    FSM_io_enable_X_2;
  wire       [7:0]    FSM_io_enable_X_3;
  wire                FSM_io_reset_acc;
  wire                PE_0_io_w_ready;
  wire       [511:0]  PE_0_io_y;
  wire                PE_0_io_done_acc;
  wire                PE_1_1_io_w_ready;
  wire       [511:0]  PE_1_1_io_y;
  wire                PE_1_1_io_done_acc;
  wire                PE_2_1_io_w_ready;
  wire       [511:0]  PE_2_1_io_y;
  wire                PE_2_1_io_done_acc;
  wire                PE_3_1_io_w_ready;
  wire       [511:0]  PE_3_1_io_y;
  wire                PE_3_1_io_done_acc;
  wire       [15:0]   _zz_cnt_beats_y_valueNext;
  wire       [0:0]    _zz_cnt_beats_y_valueNext_1;
  wire                when_Utils_l584;
  reg                 cnt_beats_y_willIncrement;
  reg                 cnt_beats_y_willClear;
  reg        [15:0]   cnt_beats_y_valueNext;
  reg        [15:0]   cnt_beats_y_value;
  wire                cnt_beats_y_willOverflowIfInc;
  wire                cnt_beats_y_willOverflow;
  wire                io_cq_wr_fire;

  assign _zz_cnt_beats_y_valueNext_1 = cnt_beats_y_willIncrement;
  assign _zz_cnt_beats_y_valueNext = {15'd0, _zz_cnt_beats_y_valueNext_1};
  DataFSM_1 FSM (
    .io_start                 (io_start                        ), //i
    .io_done                  (FSM_io_done                     ), //o
    .io_sq_rd_valid           (FSM_io_sq_rd_valid              ), //o
    .io_sq_rd_ready           (io_sq_rd_ready                  ), //i
    .io_sq_rd_payload_opcode  (FSM_io_sq_rd_payload_opcode[4:0]), //o
    .io_sq_rd_payload_strm    (FSM_io_sq_rd_payload_strm[1:0]  ), //o
    .io_sq_rd_payload_mode    (FSM_io_sq_rd_payload_mode       ), //o
    .io_sq_rd_payload_rdma    (FSM_io_sq_rd_payload_rdma       ), //o
    .io_sq_rd_payload_remote  (FSM_io_sq_rd_payload_remote     ), //o
    .io_sq_rd_payload_vfid    (FSM_io_sq_rd_payload_vfid[3:0]  ), //o
    .io_sq_rd_payload_pid     (FSM_io_sq_rd_payload_pid[5:0]   ), //o
    .io_sq_rd_payload_dest    (FSM_io_sq_rd_payload_dest[3:0]  ), //o
    .io_sq_rd_payload_last    (FSM_io_sq_rd_payload_last       ), //o
    .io_sq_rd_payload_vaddr   (FSM_io_sq_rd_payload_vaddr[47:0]), //o
    .io_sq_rd_payload_len     (FSM_io_sq_rd_payload_len[27:0]  ), //o
    .io_sq_rd_payload_actv    (FSM_io_sq_rd_payload_actv       ), //o
    .io_sq_rd_payload_host    (FSM_io_sq_rd_payload_host       ), //o
    .io_sq_rd_payload_offs    (FSM_io_sq_rd_payload_offs[5:0]  ), //o
    .io_sq_rd_payload_rsrvd   (FSM_io_sq_rd_payload_rsrvd[18:0]), //o
    .io_sq_wr_valid           (FSM_io_sq_wr_valid              ), //o
    .io_sq_wr_ready           (io_sq_wr_ready                  ), //i
    .io_sq_wr_payload_opcode  (FSM_io_sq_wr_payload_opcode[4:0]), //o
    .io_sq_wr_payload_strm    (FSM_io_sq_wr_payload_strm[1:0]  ), //o
    .io_sq_wr_payload_mode    (FSM_io_sq_wr_payload_mode       ), //o
    .io_sq_wr_payload_rdma    (FSM_io_sq_wr_payload_rdma       ), //o
    .io_sq_wr_payload_remote  (FSM_io_sq_wr_payload_remote     ), //o
    .io_sq_wr_payload_vfid    (FSM_io_sq_wr_payload_vfid[3:0]  ), //o
    .io_sq_wr_payload_pid     (FSM_io_sq_wr_payload_pid[5:0]   ), //o
    .io_sq_wr_payload_dest    (FSM_io_sq_wr_payload_dest[3:0]  ), //o
    .io_sq_wr_payload_last    (FSM_io_sq_wr_payload_last       ), //o
    .io_sq_wr_payload_vaddr   (FSM_io_sq_wr_payload_vaddr[47:0]), //o
    .io_sq_wr_payload_len     (FSM_io_sq_wr_payload_len[27:0]  ), //o
    .io_sq_wr_payload_actv    (FSM_io_sq_wr_payload_actv       ), //o
    .io_sq_wr_payload_host    (FSM_io_sq_wr_payload_host       ), //o
    .io_sq_wr_payload_offs    (FSM_io_sq_wr_payload_offs[5:0]  ), //o
    .io_sq_wr_payload_rsrvd   (FSM_io_sq_wr_payload_rsrvd[18:0]), //o
    .io_cq_rd_valid           (io_cq_rd_valid                  ), //i
    .io_cq_rd_ready           (FSM_io_cq_rd_ready              ), //o
    .io_cq_rd_payload_opcode  (io_cq_rd_payload_opcode[4:0]    ), //i
    .io_cq_rd_payload_strm    (io_cq_rd_payload_strm[1:0]      ), //i
    .io_cq_rd_payload_remote  (io_cq_rd_payload_remote         ), //i
    .io_cq_rd_payload_host    (io_cq_rd_payload_host           ), //i
    .io_cq_rd_payload_dest    (io_cq_rd_payload_dest[3:0]      ), //i
    .io_cq_rd_payload_pid     (io_cq_rd_payload_pid[5:0]       ), //i
    .io_cq_rd_payload_vfid    (io_cq_rd_payload_vfid[3:0]      ), //i
    .io_cq_rd_payload_rsrvd   (io_cq_rd_payload_rsrvd[8:0]     ), //i
    .io_cq_wr_valid           (io_cq_wr_valid                  ), //i
    .io_cq_wr_ready           (FSM_io_cq_wr_ready              ), //o
    .io_cq_wr_payload_opcode  (io_cq_wr_payload_opcode[4:0]    ), //i
    .io_cq_wr_payload_strm    (io_cq_wr_payload_strm[1:0]      ), //i
    .io_cq_wr_payload_remote  (io_cq_wr_payload_remote         ), //i
    .io_cq_wr_payload_host    (io_cq_wr_payload_host           ), //i
    .io_cq_wr_payload_dest    (io_cq_wr_payload_dest[3:0]      ), //i
    .io_cq_wr_payload_pid     (io_cq_wr_payload_pid[5:0]       ), //i
    .io_cq_wr_payload_vfid    (io_cq_wr_payload_vfid[3:0]      ), //i
    .io_cq_wr_payload_rsrvd   (io_cq_wr_payload_rsrvd[8:0]     ), //i
    .io_axis_card_recv_tdata  (io_axis_card_recv_tdata[511:0]  ), //i
    .io_axis_card_recv_tkeep  (io_axis_card_recv_tkeep[63:0]   ), //i
    .io_axis_card_recv_tid    (io_axis_card_recv_tid[5:0]      ), //i
    .io_axis_card_recv_tlast  (io_axis_card_recv_tlast         ), //i
    .io_axis_card_recv_tvalid (io_axis_card_recv_tvalid        ), //i
    .io_axis_card_recv_tready (FSM_io_axis_card_recv_tready    ), //o
    .io_M                     (io_M[15:0]                      ), //i
    .io_N                     (io_N[15:0]                      ), //i
    .io_K                     (io_K[15:0]                      ), //i
    .io_base_addr_X           (io_base_addr_X[63:0]            ), //i
    .io_base_addr_W           (io_base_addr_W[63:0]            ), //i
    .io_base_addr_Y           (io_base_addr_Y[63:0]            ), //i
    .io_Non_zero_per_K_slice  (io_Non_zero_per_K_slice[15:0]   ), //i
    .io_x                     (FSM_io_x[511:0]                 ), //o
    .io_w_valid               (FSM_io_w_valid                  ), //o
    .io_w_ready               (FSM_io_w_ready                  ), //i
    .io_w_payload             (FSM_io_w_payload[511:0]         ), //o
    .io_select_Y              (FSM_io_select_Y[3:0]            ), //o
    .io_enable_X_0            (FSM_io_enable_X_0[7:0]          ), //o
    .io_enable_X_1            (FSM_io_enable_X_1[7:0]          ), //o
    .io_enable_X_2            (FSM_io_enable_X_2[7:0]          ), //o
    .io_enable_X_3            (FSM_io_enable_X_3[7:0]          ), //o
    .io_reset_acc             (FSM_io_reset_acc                ), //o
    .io_done_acc              (FSM_io_done_acc                 ), //i
    .clk                      (clk                             ), //i
    .resetn                   (resetn                          )  //i
  );
  PE PE_0 (
    .io_x         (FSM_io_x[511:0]        ), //i
    .io_w_valid   (FSM_io_w_valid         ), //i
    .io_w_ready   (PE_0_io_w_ready        ), //o
    .io_w_payload (FSM_io_w_payload[511:0]), //i
    .io_enable_X  (FSM_io_enable_X_0[7:0] ), //i
    .io_reset_acc (FSM_io_reset_acc       ), //i
    .io_y         (PE_0_io_y[511:0]       ), //o
    .io_done_acc  (PE_0_io_done_acc       ), //o
    .clk          (clk                    ), //i
    .resetn       (resetn                 )  //i
  );
  PE PE_1_1 (
    .io_x         (FSM_io_x[511:0]        ), //i
    .io_w_valid   (FSM_io_w_valid         ), //i
    .io_w_ready   (PE_1_1_io_w_ready      ), //o
    .io_w_payload (FSM_io_w_payload[511:0]), //i
    .io_enable_X  (FSM_io_enable_X_1[7:0] ), //i
    .io_reset_acc (FSM_io_reset_acc       ), //i
    .io_y         (PE_1_1_io_y[511:0]     ), //o
    .io_done_acc  (PE_1_1_io_done_acc     ), //o
    .clk          (clk                    ), //i
    .resetn       (resetn                 )  //i
  );
  PE PE_2_1 (
    .io_x         (FSM_io_x[511:0]        ), //i
    .io_w_valid   (FSM_io_w_valid         ), //i
    .io_w_ready   (PE_2_1_io_w_ready      ), //o
    .io_w_payload (FSM_io_w_payload[511:0]), //i
    .io_enable_X  (FSM_io_enable_X_2[7:0] ), //i
    .io_reset_acc (FSM_io_reset_acc       ), //i
    .io_y         (PE_2_1_io_y[511:0]     ), //o
    .io_done_acc  (PE_2_1_io_done_acc     ), //o
    .clk          (clk                    ), //i
    .resetn       (resetn                 )  //i
  );
  PE PE_3_1 (
    .io_x         (FSM_io_x[511:0]        ), //i
    .io_w_valid   (FSM_io_w_valid         ), //i
    .io_w_ready   (PE_3_1_io_w_ready      ), //o
    .io_w_payload (FSM_io_w_payload[511:0]), //i
    .io_enable_X  (FSM_io_enable_X_3[7:0] ), //i
    .io_reset_acc (FSM_io_reset_acc       ), //i
    .io_y         (PE_3_1_io_y[511:0]     ), //o
    .io_done_acc  (PE_3_1_io_done_acc     ), //o
    .clk          (clk                    ), //i
    .resetn       (resetn                 )  //i
  );
  assign when_Utils_l584 = (io_axis_card_send_tready && io_axis_card_send_tvalid);
  always @(*) begin
    cnt_beats_y_willIncrement = 1'b0;
    if(when_Utils_l584) begin
      cnt_beats_y_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    cnt_beats_y_willClear = 1'b0;
    if(io_cq_wr_fire) begin
      cnt_beats_y_willClear = 1'b1;
    end
  end

  assign cnt_beats_y_willOverflowIfInc = (cnt_beats_y_value == 16'hffff);
  assign cnt_beats_y_willOverflow = (cnt_beats_y_willOverflowIfInc && cnt_beats_y_willIncrement);
  always @(*) begin
    cnt_beats_y_valueNext = (cnt_beats_y_value + _zz_cnt_beats_y_valueNext);
    if(cnt_beats_y_willClear) begin
      cnt_beats_y_valueNext = 16'h0;
    end
  end

  assign io_done = FSM_io_done;
  assign io_sq_rd_valid = FSM_io_sq_rd_valid;
  assign io_sq_rd_payload_opcode = FSM_io_sq_rd_payload_opcode;
  assign io_sq_rd_payload_strm = FSM_io_sq_rd_payload_strm;
  assign io_sq_rd_payload_mode = FSM_io_sq_rd_payload_mode;
  assign io_sq_rd_payload_rdma = FSM_io_sq_rd_payload_rdma;
  assign io_sq_rd_payload_remote = FSM_io_sq_rd_payload_remote;
  assign io_sq_rd_payload_vfid = FSM_io_sq_rd_payload_vfid;
  assign io_sq_rd_payload_pid = FSM_io_sq_rd_payload_pid;
  assign io_sq_rd_payload_dest = FSM_io_sq_rd_payload_dest;
  assign io_sq_rd_payload_last = FSM_io_sq_rd_payload_last;
  assign io_sq_rd_payload_vaddr = FSM_io_sq_rd_payload_vaddr;
  assign io_sq_rd_payload_len = FSM_io_sq_rd_payload_len;
  assign io_sq_rd_payload_actv = FSM_io_sq_rd_payload_actv;
  assign io_sq_rd_payload_host = FSM_io_sq_rd_payload_host;
  assign io_sq_rd_payload_offs = FSM_io_sq_rd_payload_offs;
  assign io_sq_rd_payload_rsrvd = FSM_io_sq_rd_payload_rsrvd;
  assign io_sq_wr_valid = FSM_io_sq_wr_valid;
  assign io_sq_wr_payload_opcode = FSM_io_sq_wr_payload_opcode;
  assign io_sq_wr_payload_strm = FSM_io_sq_wr_payload_strm;
  assign io_sq_wr_payload_mode = FSM_io_sq_wr_payload_mode;
  assign io_sq_wr_payload_rdma = FSM_io_sq_wr_payload_rdma;
  assign io_sq_wr_payload_remote = FSM_io_sq_wr_payload_remote;
  assign io_sq_wr_payload_vfid = FSM_io_sq_wr_payload_vfid;
  assign io_sq_wr_payload_pid = FSM_io_sq_wr_payload_pid;
  assign io_sq_wr_payload_dest = FSM_io_sq_wr_payload_dest;
  assign io_sq_wr_payload_last = FSM_io_sq_wr_payload_last;
  assign io_sq_wr_payload_vaddr = FSM_io_sq_wr_payload_vaddr;
  assign io_sq_wr_payload_len = FSM_io_sq_wr_payload_len;
  assign io_sq_wr_payload_actv = FSM_io_sq_wr_payload_actv;
  assign io_sq_wr_payload_host = FSM_io_sq_wr_payload_host;
  assign io_sq_wr_payload_offs = FSM_io_sq_wr_payload_offs;
  assign io_sq_wr_payload_rsrvd = FSM_io_sq_wr_payload_rsrvd;
  assign io_cq_rd_ready = FSM_io_cq_rd_ready;
  assign io_cq_wr_ready = FSM_io_cq_wr_ready;
  assign io_axis_card_recv_tready = FSM_io_axis_card_recv_tready;
  assign FSM_io_w_ready = (((PE_0_io_w_ready && PE_1_1_io_w_ready) && PE_2_1_io_w_ready) && PE_3_1_io_w_ready);
  assign FSM_io_done_acc = (((PE_0_io_done_acc && PE_1_1_io_done_acc) && PE_2_1_io_done_acc) && PE_3_1_io_done_acc);
  assign io_axis_card_send_tkeep = 64'hffffffffffffffff;
  assign io_axis_card_send_tid = 6'h0;
  assign io_axis_card_send_tlast = (cnt_beats_y_value == 16'h0001);
  assign io_cq_wr_fire = (io_cq_wr_valid && io_cq_wr_ready);
  always @(*) begin
    case(FSM_io_select_Y)
      4'b0001 : begin
        io_axis_card_send_tdata = PE_0_io_y;
      end
      4'b0010 : begin
        io_axis_card_send_tdata = PE_1_1_io_y;
      end
      4'b0100 : begin
        io_axis_card_send_tdata = PE_2_1_io_y;
      end
      4'b1000 : begin
        io_axis_card_send_tdata = PE_3_1_io_y;
      end
      default : begin
        io_axis_card_send_tdata = 512'h0;
      end
    endcase
  end

  always @(*) begin
    case(FSM_io_select_Y)
      4'b0001 : begin
        io_axis_card_send_tvalid = 1'b1;
      end
      4'b0010 : begin
        io_axis_card_send_tvalid = 1'b1;
      end
      4'b0100 : begin
        io_axis_card_send_tvalid = 1'b1;
      end
      4'b1000 : begin
        io_axis_card_send_tvalid = 1'b1;
      end
      default : begin
        io_axis_card_send_tvalid = 1'b0;
      end
    endcase
  end

  always @(posedge clk) begin
    if(!resetn) begin
      cnt_beats_y_value <= 16'h0;
    end else begin
      cnt_beats_y_value <= cnt_beats_y_valueNext;
    end
  end


endmodule

//PE_3 replaced by PE

//PE_2 replaced by PE

//PE_1 replaced by PE

module PE (
  input  wire [511:0]  io_x,
  input  wire          io_w_valid,
  output reg           io_w_ready,
  input  wire [511:0]  io_w_payload,
  input  wire [7:0]    io_enable_X,
  input  wire          io_reset_acc,
  output reg  [511:0]  io_y,
  output reg           io_done_acc,
  input  wire          clk,
  input  wire          resetn
);
  localparam FSM_W_BOOT = 2'd0;
  localparam FSM_W_WAIT_WEIGHT = 2'd1;
  localparam FSM_W_PROCESSING = 2'd2;

  wire       [5:0]    _zz_cnt_w_valueNext;
  wire       [0:0]    _zz_cnt_w_valueNext_1;
  wire       [15:0]   _zz_io_y;
  wire       [15:0]   _zz_io_y_1;
  wire       [15:0]   _zz_io_y_2;
  wire       [15:0]   _zz_io_y_3;
  wire       [15:0]   _zz_io_y_4;
  wire       [15:0]   _zz_io_y_5;
  wire       [15:0]   _zz_io_y_6;
  wire       [15:0]   _zz_io_y_7;
  wire       [15:0]   _zz_io_y_8;
  wire       [15:0]   _zz_io_y_9;
  wire       [15:0]   _zz_io_y_10;
  wire       [15:0]   _zz_io_y_11;
  wire       [15:0]   _zz_io_y_12;
  wire       [15:0]   _zz_io_y_13;
  wire       [15:0]   _zz_io_y_14;
  wire       [15:0]   _zz_io_y_15;
  wire       [15:0]   _zz_io_y_16;
  wire       [15:0]   _zz_io_y_17;
  wire       [15:0]   _zz_io_y_18;
  wire       [15:0]   _zz_io_y_19;
  wire       [15:0]   _zz_io_y_20;
  wire       [15:0]   _zz_io_y_21;
  wire       [15:0]   _zz_io_y_22;
  wire       [15:0]   _zz_io_y_23;
  wire       [15:0]   _zz_io_y_24;
  wire       [15:0]   _zz_io_y_25;
  wire       [15:0]   _zz_io_y_26;
  wire       [15:0]   _zz_io_y_27;
  wire       [15:0]   _zz_io_y_28;
  wire       [15:0]   _zz_io_y_29;
  wire       [15:0]   _zz_io_y_30;
  wire       [15:0]   _zz_io_y_31;
  reg        [15:0]   _zz__zz_acc_0_1;
  reg        [15:0]   _zz__zz_acc_0_1_1;
  wire       [7:0]    _zz__zz_acc_0_1_2;
  reg        [7:0]    _zz__zz_acc_0_1_3;
  wire       [7:0]    _zz__zz_acc_0_1_4;
  wire       [7:0]    _zz__zz_acc_0_1_5;
  wire       [7:0]    _zz__zz_acc_0_1_6;
  wire       [7:0]    _zz__zz_acc_0_1_7;
  wire       [7:0]    _zz__zz_acc_0_1_8;
  wire       [7:0]    _zz__zz_acc_0_1_9;
  wire       [7:0]    _zz__zz_acc_0_1_10;
  wire       [7:0]    _zz__zz_acc_0_1_11;
  wire       [7:0]    _zz__zz_acc_0_1_12;
  wire       [7:0]    _zz__zz_acc_0_1_13;
  wire       [7:0]    _zz__zz_acc_0_1_14;
  wire       [7:0]    _zz__zz_acc_0_1_15;
  wire       [7:0]    _zz__zz_acc_0_1_16;
  wire       [7:0]    _zz__zz_acc_0_1_17;
  wire       [7:0]    _zz__zz_acc_0_1_18;
  wire       [7:0]    _zz__zz_acc_0_1_19;
  wire       [7:0]    _zz__zz_acc_0_1_20;
  wire       [7:0]    _zz__zz_acc_0_1_21;
  wire       [7:0]    _zz__zz_acc_0_1_22;
  wire       [7:0]    _zz__zz_acc_0_1_23;
  wire       [7:0]    _zz__zz_acc_0_1_24;
  wire       [7:0]    _zz__zz_acc_0_1_25;
  wire       [7:0]    _zz__zz_acc_0_1_26;
  wire       [7:0]    _zz__zz_acc_0_1_27;
  wire       [7:0]    _zz__zz_acc_0_1_28;
  wire       [7:0]    _zz__zz_acc_0_1_29;
  wire       [7:0]    _zz__zz_acc_0_1_30;
  wire       [7:0]    _zz__zz_acc_0_1_31;
  wire       [7:0]    _zz__zz_acc_0_1_32;
  wire       [7:0]    _zz__zz_acc_0_1_33;
  wire       [7:0]    _zz__zz_acc_0_1_34;
  wire       [7:0]    _zz__zz_acc_0_1_35;
  wire       [7:0]    _zz__zz_acc_0_1_36;
  wire       [7:0]    _zz__zz_acc_0_1_37;
  wire       [7:0]    _zz__zz_acc_0_1_38;
  wire       [7:0]    _zz__zz_acc_0_1_39;
  wire       [7:0]    _zz__zz_acc_0_1_40;
  wire       [7:0]    _zz__zz_acc_0_1_41;
  wire       [7:0]    _zz__zz_acc_0_1_42;
  wire       [7:0]    _zz__zz_acc_0_1_43;
  wire       [7:0]    _zz__zz_acc_0_1_44;
  wire       [7:0]    _zz__zz_acc_0_1_45;
  wire       [7:0]    _zz__zz_acc_0_1_46;
  wire       [7:0]    _zz__zz_acc_0_1_47;
  wire       [7:0]    _zz__zz_acc_0_1_48;
  wire       [7:0]    _zz__zz_acc_0_1_49;
  wire       [7:0]    _zz__zz_acc_0_1_50;
  wire       [7:0]    _zz__zz_acc_0_1_51;
  wire       [7:0]    _zz__zz_acc_0_1_52;
  wire       [7:0]    _zz__zz_acc_0_1_53;
  wire       [7:0]    _zz__zz_acc_0_1_54;
  wire       [7:0]    _zz__zz_acc_0_1_55;
  wire       [7:0]    _zz__zz_acc_0_1_56;
  wire       [7:0]    _zz__zz_acc_0_1_57;
  wire       [7:0]    _zz__zz_acc_0_1_58;
  wire       [7:0]    _zz__zz_acc_0_1_59;
  wire       [7:0]    _zz__zz_acc_0_1_60;
  wire       [7:0]    _zz__zz_acc_0_1_61;
  wire       [7:0]    _zz__zz_acc_0_1_62;
  wire       [7:0]    _zz__zz_acc_0_1_63;
  wire       [7:0]    _zz__zz_acc_0_1_64;
  wire       [7:0]    _zz__zz_acc_0_1_65;
  wire       [7:0]    _zz__zz_acc_0_1_66;
  wire       [7:0]    _zz__zz_acc_0_1_67;
  reg        [15:0]   x_reg_0;
  reg        [15:0]   x_reg_1;
  reg        [15:0]   x_reg_2;
  reg        [15:0]   x_reg_3;
  reg        [15:0]   x_reg_4;
  reg        [15:0]   x_reg_5;
  reg        [15:0]   x_reg_6;
  reg        [15:0]   x_reg_7;
  reg        [15:0]   x_reg_8;
  reg        [15:0]   x_reg_9;
  reg        [15:0]   x_reg_10;
  reg        [15:0]   x_reg_11;
  reg        [15:0]   x_reg_12;
  reg        [15:0]   x_reg_13;
  reg        [15:0]   x_reg_14;
  reg        [15:0]   x_reg_15;
  reg        [15:0]   x_reg_16;
  reg        [15:0]   x_reg_17;
  reg        [15:0]   x_reg_18;
  reg        [15:0]   x_reg_19;
  reg        [15:0]   x_reg_20;
  reg        [15:0]   x_reg_21;
  reg        [15:0]   x_reg_22;
  reg        [15:0]   x_reg_23;
  reg        [15:0]   x_reg_24;
  reg        [15:0]   x_reg_25;
  reg        [15:0]   x_reg_26;
  reg        [15:0]   x_reg_27;
  reg        [15:0]   x_reg_28;
  reg        [15:0]   x_reg_29;
  reg        [15:0]   x_reg_30;
  reg        [15:0]   x_reg_31;
  reg        [15:0]   x_reg_32;
  reg        [15:0]   x_reg_33;
  reg        [15:0]   x_reg_34;
  reg        [15:0]   x_reg_35;
  reg        [15:0]   x_reg_36;
  reg        [15:0]   x_reg_37;
  reg        [15:0]   x_reg_38;
  reg        [15:0]   x_reg_39;
  reg        [15:0]   x_reg_40;
  reg        [15:0]   x_reg_41;
  reg        [15:0]   x_reg_42;
  reg        [15:0]   x_reg_43;
  reg        [15:0]   x_reg_44;
  reg        [15:0]   x_reg_45;
  reg        [15:0]   x_reg_46;
  reg        [15:0]   x_reg_47;
  reg        [15:0]   x_reg_48;
  reg        [15:0]   x_reg_49;
  reg        [15:0]   x_reg_50;
  reg        [15:0]   x_reg_51;
  reg        [15:0]   x_reg_52;
  reg        [15:0]   x_reg_53;
  reg        [15:0]   x_reg_54;
  reg        [15:0]   x_reg_55;
  reg        [15:0]   x_reg_56;
  reg        [15:0]   x_reg_57;
  reg        [15:0]   x_reg_58;
  reg        [15:0]   x_reg_59;
  reg        [15:0]   x_reg_60;
  reg        [15:0]   x_reg_61;
  reg        [15:0]   x_reg_62;
  reg        [15:0]   x_reg_63;
  reg        [15:0]   x_reg_64;
  reg        [15:0]   x_reg_65;
  reg        [15:0]   x_reg_66;
  reg        [15:0]   x_reg_67;
  reg        [15:0]   x_reg_68;
  reg        [15:0]   x_reg_69;
  reg        [15:0]   x_reg_70;
  reg        [15:0]   x_reg_71;
  reg        [15:0]   x_reg_72;
  reg        [15:0]   x_reg_73;
  reg        [15:0]   x_reg_74;
  reg        [15:0]   x_reg_75;
  reg        [15:0]   x_reg_76;
  reg        [15:0]   x_reg_77;
  reg        [15:0]   x_reg_78;
  reg        [15:0]   x_reg_79;
  reg        [15:0]   x_reg_80;
  reg        [15:0]   x_reg_81;
  reg        [15:0]   x_reg_82;
  reg        [15:0]   x_reg_83;
  reg        [15:0]   x_reg_84;
  reg        [15:0]   x_reg_85;
  reg        [15:0]   x_reg_86;
  reg        [15:0]   x_reg_87;
  reg        [15:0]   x_reg_88;
  reg        [15:0]   x_reg_89;
  reg        [15:0]   x_reg_90;
  reg        [15:0]   x_reg_91;
  reg        [15:0]   x_reg_92;
  reg        [15:0]   x_reg_93;
  reg        [15:0]   x_reg_94;
  reg        [15:0]   x_reg_95;
  reg        [15:0]   x_reg_96;
  reg        [15:0]   x_reg_97;
  reg        [15:0]   x_reg_98;
  reg        [15:0]   x_reg_99;
  reg        [15:0]   x_reg_100;
  reg        [15:0]   x_reg_101;
  reg        [15:0]   x_reg_102;
  reg        [15:0]   x_reg_103;
  reg        [15:0]   x_reg_104;
  reg        [15:0]   x_reg_105;
  reg        [15:0]   x_reg_106;
  reg        [15:0]   x_reg_107;
  reg        [15:0]   x_reg_108;
  reg        [15:0]   x_reg_109;
  reg        [15:0]   x_reg_110;
  reg        [15:0]   x_reg_111;
  reg        [15:0]   x_reg_112;
  reg        [15:0]   x_reg_113;
  reg        [15:0]   x_reg_114;
  reg        [15:0]   x_reg_115;
  reg        [15:0]   x_reg_116;
  reg        [15:0]   x_reg_117;
  reg        [15:0]   x_reg_118;
  reg        [15:0]   x_reg_119;
  reg        [15:0]   x_reg_120;
  reg        [15:0]   x_reg_121;
  reg        [15:0]   x_reg_122;
  reg        [15:0]   x_reg_123;
  reg        [15:0]   x_reg_124;
  reg        [15:0]   x_reg_125;
  reg        [15:0]   x_reg_126;
  reg        [15:0]   x_reg_127;
  reg        [15:0]   x_reg_128;
  reg        [15:0]   x_reg_129;
  reg        [15:0]   x_reg_130;
  reg        [15:0]   x_reg_131;
  reg        [15:0]   x_reg_132;
  reg        [15:0]   x_reg_133;
  reg        [15:0]   x_reg_134;
  reg        [15:0]   x_reg_135;
  reg        [15:0]   x_reg_136;
  reg        [15:0]   x_reg_137;
  reg        [15:0]   x_reg_138;
  reg        [15:0]   x_reg_139;
  reg        [15:0]   x_reg_140;
  reg        [15:0]   x_reg_141;
  reg        [15:0]   x_reg_142;
  reg        [15:0]   x_reg_143;
  reg        [15:0]   x_reg_144;
  reg        [15:0]   x_reg_145;
  reg        [15:0]   x_reg_146;
  reg        [15:0]   x_reg_147;
  reg        [15:0]   x_reg_148;
  reg        [15:0]   x_reg_149;
  reg        [15:0]   x_reg_150;
  reg        [15:0]   x_reg_151;
  reg        [15:0]   x_reg_152;
  reg        [15:0]   x_reg_153;
  reg        [15:0]   x_reg_154;
  reg        [15:0]   x_reg_155;
  reg        [15:0]   x_reg_156;
  reg        [15:0]   x_reg_157;
  reg        [15:0]   x_reg_158;
  reg        [15:0]   x_reg_159;
  reg        [15:0]   x_reg_160;
  reg        [15:0]   x_reg_161;
  reg        [15:0]   x_reg_162;
  reg        [15:0]   x_reg_163;
  reg        [15:0]   x_reg_164;
  reg        [15:0]   x_reg_165;
  reg        [15:0]   x_reg_166;
  reg        [15:0]   x_reg_167;
  reg        [15:0]   x_reg_168;
  reg        [15:0]   x_reg_169;
  reg        [15:0]   x_reg_170;
  reg        [15:0]   x_reg_171;
  reg        [15:0]   x_reg_172;
  reg        [15:0]   x_reg_173;
  reg        [15:0]   x_reg_174;
  reg        [15:0]   x_reg_175;
  reg        [15:0]   x_reg_176;
  reg        [15:0]   x_reg_177;
  reg        [15:0]   x_reg_178;
  reg        [15:0]   x_reg_179;
  reg        [15:0]   x_reg_180;
  reg        [15:0]   x_reg_181;
  reg        [15:0]   x_reg_182;
  reg        [15:0]   x_reg_183;
  reg        [15:0]   x_reg_184;
  reg        [15:0]   x_reg_185;
  reg        [15:0]   x_reg_186;
  reg        [15:0]   x_reg_187;
  reg        [15:0]   x_reg_188;
  reg        [15:0]   x_reg_189;
  reg        [15:0]   x_reg_190;
  reg        [15:0]   x_reg_191;
  reg        [15:0]   x_reg_192;
  reg        [15:0]   x_reg_193;
  reg        [15:0]   x_reg_194;
  reg        [15:0]   x_reg_195;
  reg        [15:0]   x_reg_196;
  reg        [15:0]   x_reg_197;
  reg        [15:0]   x_reg_198;
  reg        [15:0]   x_reg_199;
  reg        [15:0]   x_reg_200;
  reg        [15:0]   x_reg_201;
  reg        [15:0]   x_reg_202;
  reg        [15:0]   x_reg_203;
  reg        [15:0]   x_reg_204;
  reg        [15:0]   x_reg_205;
  reg        [15:0]   x_reg_206;
  reg        [15:0]   x_reg_207;
  reg        [15:0]   x_reg_208;
  reg        [15:0]   x_reg_209;
  reg        [15:0]   x_reg_210;
  reg        [15:0]   x_reg_211;
  reg        [15:0]   x_reg_212;
  reg        [15:0]   x_reg_213;
  reg        [15:0]   x_reg_214;
  reg        [15:0]   x_reg_215;
  reg        [15:0]   x_reg_216;
  reg        [15:0]   x_reg_217;
  reg        [15:0]   x_reg_218;
  reg        [15:0]   x_reg_219;
  reg        [15:0]   x_reg_220;
  reg        [15:0]   x_reg_221;
  reg        [15:0]   x_reg_222;
  reg        [15:0]   x_reg_223;
  reg        [15:0]   x_reg_224;
  reg        [15:0]   x_reg_225;
  reg        [15:0]   x_reg_226;
  reg        [15:0]   x_reg_227;
  reg        [15:0]   x_reg_228;
  reg        [15:0]   x_reg_229;
  reg        [15:0]   x_reg_230;
  reg        [15:0]   x_reg_231;
  reg        [15:0]   x_reg_232;
  reg        [15:0]   x_reg_233;
  reg        [15:0]   x_reg_234;
  reg        [15:0]   x_reg_235;
  reg        [15:0]   x_reg_236;
  reg        [15:0]   x_reg_237;
  reg        [15:0]   x_reg_238;
  reg        [15:0]   x_reg_239;
  reg        [15:0]   x_reg_240;
  reg        [15:0]   x_reg_241;
  reg        [15:0]   x_reg_242;
  reg        [15:0]   x_reg_243;
  reg        [15:0]   x_reg_244;
  reg        [15:0]   x_reg_245;
  reg        [15:0]   x_reg_246;
  reg        [15:0]   x_reg_247;
  reg        [15:0]   x_reg_248;
  reg        [15:0]   x_reg_249;
  reg        [15:0]   x_reg_250;
  reg        [15:0]   x_reg_251;
  reg        [15:0]   x_reg_252;
  reg        [15:0]   x_reg_253;
  reg        [15:0]   x_reg_254;
  reg        [15:0]   x_reg_255;
  reg        [15:0]   acc_0;
  reg        [15:0]   acc_1;
  reg        [15:0]   acc_2;
  reg        [15:0]   acc_3;
  reg        [15:0]   acc_4;
  reg        [15:0]   acc_5;
  reg        [15:0]   acc_6;
  reg        [15:0]   acc_7;
  reg        [15:0]   acc_8;
  reg        [15:0]   acc_9;
  reg        [15:0]   acc_10;
  reg        [15:0]   acc_11;
  reg        [15:0]   acc_12;
  reg        [15:0]   acc_13;
  reg        [15:0]   acc_14;
  reg        [15:0]   acc_15;
  reg        [15:0]   acc_16;
  reg        [15:0]   acc_17;
  reg        [15:0]   acc_18;
  reg        [15:0]   acc_19;
  reg        [15:0]   acc_20;
  reg        [15:0]   acc_21;
  reg        [15:0]   acc_22;
  reg        [15:0]   acc_23;
  reg        [15:0]   acc_24;
  reg        [15:0]   acc_25;
  reg        [15:0]   acc_26;
  reg        [15:0]   acc_27;
  reg        [15:0]   acc_28;
  reg        [15:0]   acc_29;
  reg        [15:0]   acc_30;
  reg        [15:0]   acc_31;
  reg        [15:0]   acc_32;
  reg        [15:0]   acc_33;
  reg        [15:0]   acc_34;
  reg        [15:0]   acc_35;
  reg        [15:0]   acc_36;
  reg        [15:0]   acc_37;
  reg        [15:0]   acc_38;
  reg        [15:0]   acc_39;
  reg        [15:0]   acc_40;
  reg        [15:0]   acc_41;
  reg        [15:0]   acc_42;
  reg        [15:0]   acc_43;
  reg        [15:0]   acc_44;
  reg        [15:0]   acc_45;
  reg        [15:0]   acc_46;
  reg        [15:0]   acc_47;
  reg        [15:0]   acc_48;
  reg        [15:0]   acc_49;
  reg        [15:0]   acc_50;
  reg        [15:0]   acc_51;
  reg        [15:0]   acc_52;
  reg        [15:0]   acc_53;
  reg        [15:0]   acc_54;
  reg        [15:0]   acc_55;
  reg        [15:0]   acc_56;
  reg        [15:0]   acc_57;
  reg        [15:0]   acc_58;
  reg        [15:0]   acc_59;
  reg        [15:0]   acc_60;
  reg        [15:0]   acc_61;
  reg        [15:0]   acc_62;
  reg        [15:0]   acc_63;
  wire       [1023:0] _zz_acc_0;
  wire                when_PE_l36;
  wire                when_PE_l36_1;
  wire                when_PE_l36_2;
  wire                when_PE_l36_3;
  wire                when_PE_l36_4;
  wire                when_PE_l36_5;
  wire                when_PE_l36_6;
  wire                when_PE_l36_7;
  reg                 cnt_w_willIncrement;
  reg                 cnt_w_willClear;
  reg        [5:0]    cnt_w_valueNext;
  reg        [5:0]    cnt_w_value;
  wire                cnt_w_willOverflowIfInc;
  wire                cnt_w_willOverflow;
  wire                FSM_W_wantExit;
  reg                 FSM_W_wantStart;
  wire                FSM_W_wantKill;
  reg        [1:0]    FSM_W_stateReg;
  reg        [1:0]    FSM_W_stateNext;
  wire                io_w_fire;
  wire       [63:0]   _zz_1;
  wire       [15:0]   _zz_acc_0_1;
  wire                FSM_W_onExit_BOOT;
  wire                FSM_W_onExit_WAIT_WEIGHT;
  wire                FSM_W_onExit_PROCESSING;
  wire                FSM_W_onEntry_BOOT;
  wire                FSM_W_onEntry_WAIT_WEIGHT;
  wire                FSM_W_onEntry_PROCESSING;
  `ifndef SYNTHESIS
  reg [87:0] FSM_W_stateReg_string;
  reg [87:0] FSM_W_stateNext_string;
  `endif


  assign _zz_cnt_w_valueNext_1 = cnt_w_willIncrement;
  assign _zz_cnt_w_valueNext = {5'd0, _zz_cnt_w_valueNext_1};
  assign _zz_io_y = ($signed(acc_0) - $signed(acc_1));
  assign _zz_io_y_1 = ($signed(acc_2) - $signed(acc_3));
  assign _zz_io_y_2 = ($signed(acc_4) - $signed(acc_5));
  assign _zz_io_y_3 = ($signed(acc_6) - $signed(acc_7));
  assign _zz_io_y_4 = ($signed(acc_8) - $signed(acc_9));
  assign _zz_io_y_5 = ($signed(acc_10) - $signed(acc_11));
  assign _zz_io_y_6 = ($signed(acc_12) - $signed(acc_13));
  assign _zz_io_y_7 = ($signed(acc_14) - $signed(acc_15));
  assign _zz_io_y_8 = ($signed(acc_16) - $signed(acc_17));
  assign _zz_io_y_9 = ($signed(acc_18) - $signed(acc_19));
  assign _zz_io_y_10 = ($signed(acc_20) - $signed(acc_21));
  assign _zz_io_y_11 = ($signed(acc_22) - $signed(acc_23));
  assign _zz_io_y_12 = ($signed(acc_24) - $signed(acc_25));
  assign _zz_io_y_13 = ($signed(acc_26) - $signed(acc_27));
  assign _zz_io_y_14 = ($signed(acc_28) - $signed(acc_29));
  assign _zz_io_y_15 = ($signed(acc_30) - $signed(acc_31));
  assign _zz_io_y_16 = ($signed(acc_32) - $signed(acc_33));
  assign _zz_io_y_17 = ($signed(acc_34) - $signed(acc_35));
  assign _zz_io_y_18 = ($signed(acc_36) - $signed(acc_37));
  assign _zz_io_y_19 = ($signed(acc_38) - $signed(acc_39));
  assign _zz_io_y_20 = ($signed(acc_40) - $signed(acc_41));
  assign _zz_io_y_21 = ($signed(acc_42) - $signed(acc_43));
  assign _zz_io_y_22 = ($signed(acc_44) - $signed(acc_45));
  assign _zz_io_y_23 = ($signed(acc_46) - $signed(acc_47));
  assign _zz_io_y_24 = ($signed(acc_48) - $signed(acc_49));
  assign _zz_io_y_25 = ($signed(acc_50) - $signed(acc_51));
  assign _zz_io_y_26 = ($signed(acc_52) - $signed(acc_53));
  assign _zz_io_y_27 = ($signed(acc_54) - $signed(acc_55));
  assign _zz_io_y_28 = ($signed(acc_56) - $signed(acc_57));
  assign _zz_io_y_29 = ($signed(acc_58) - $signed(acc_59));
  assign _zz_io_y_30 = ($signed(acc_60) - $signed(acc_61));
  assign _zz_io_y_31 = ($signed(acc_62) - $signed(acc_63));
  assign _zz__zz_acc_0_1_2 = _zz__zz_acc_0_1_3;
  assign _zz__zz_acc_0_1_4 = io_w_payload[7 : 0];
  assign _zz__zz_acc_0_1_5 = io_w_payload[15 : 8];
  assign _zz__zz_acc_0_1_6 = io_w_payload[23 : 16];
  assign _zz__zz_acc_0_1_7 = io_w_payload[31 : 24];
  assign _zz__zz_acc_0_1_8 = io_w_payload[39 : 32];
  assign _zz__zz_acc_0_1_9 = io_w_payload[47 : 40];
  assign _zz__zz_acc_0_1_10 = io_w_payload[55 : 48];
  assign _zz__zz_acc_0_1_11 = io_w_payload[63 : 56];
  assign _zz__zz_acc_0_1_12 = io_w_payload[71 : 64];
  assign _zz__zz_acc_0_1_13 = io_w_payload[79 : 72];
  assign _zz__zz_acc_0_1_14 = io_w_payload[87 : 80];
  assign _zz__zz_acc_0_1_15 = io_w_payload[95 : 88];
  assign _zz__zz_acc_0_1_16 = io_w_payload[103 : 96];
  assign _zz__zz_acc_0_1_17 = io_w_payload[111 : 104];
  assign _zz__zz_acc_0_1_18 = io_w_payload[119 : 112];
  assign _zz__zz_acc_0_1_19 = io_w_payload[127 : 120];
  assign _zz__zz_acc_0_1_20 = io_w_payload[135 : 128];
  assign _zz__zz_acc_0_1_21 = io_w_payload[143 : 136];
  assign _zz__zz_acc_0_1_22 = io_w_payload[151 : 144];
  assign _zz__zz_acc_0_1_23 = io_w_payload[159 : 152];
  assign _zz__zz_acc_0_1_24 = io_w_payload[167 : 160];
  assign _zz__zz_acc_0_1_25 = io_w_payload[175 : 168];
  assign _zz__zz_acc_0_1_26 = io_w_payload[183 : 176];
  assign _zz__zz_acc_0_1_27 = io_w_payload[191 : 184];
  assign _zz__zz_acc_0_1_28 = io_w_payload[199 : 192];
  assign _zz__zz_acc_0_1_29 = io_w_payload[207 : 200];
  assign _zz__zz_acc_0_1_30 = io_w_payload[215 : 208];
  assign _zz__zz_acc_0_1_31 = io_w_payload[223 : 216];
  assign _zz__zz_acc_0_1_32 = io_w_payload[231 : 224];
  assign _zz__zz_acc_0_1_33 = io_w_payload[239 : 232];
  assign _zz__zz_acc_0_1_34 = io_w_payload[247 : 240];
  assign _zz__zz_acc_0_1_35 = io_w_payload[255 : 248];
  assign _zz__zz_acc_0_1_36 = io_w_payload[263 : 256];
  assign _zz__zz_acc_0_1_37 = io_w_payload[271 : 264];
  assign _zz__zz_acc_0_1_38 = io_w_payload[279 : 272];
  assign _zz__zz_acc_0_1_39 = io_w_payload[287 : 280];
  assign _zz__zz_acc_0_1_40 = io_w_payload[295 : 288];
  assign _zz__zz_acc_0_1_41 = io_w_payload[303 : 296];
  assign _zz__zz_acc_0_1_42 = io_w_payload[311 : 304];
  assign _zz__zz_acc_0_1_43 = io_w_payload[319 : 312];
  assign _zz__zz_acc_0_1_44 = io_w_payload[327 : 320];
  assign _zz__zz_acc_0_1_45 = io_w_payload[335 : 328];
  assign _zz__zz_acc_0_1_46 = io_w_payload[343 : 336];
  assign _zz__zz_acc_0_1_47 = io_w_payload[351 : 344];
  assign _zz__zz_acc_0_1_48 = io_w_payload[359 : 352];
  assign _zz__zz_acc_0_1_49 = io_w_payload[367 : 360];
  assign _zz__zz_acc_0_1_50 = io_w_payload[375 : 368];
  assign _zz__zz_acc_0_1_51 = io_w_payload[383 : 376];
  assign _zz__zz_acc_0_1_52 = io_w_payload[391 : 384];
  assign _zz__zz_acc_0_1_53 = io_w_payload[399 : 392];
  assign _zz__zz_acc_0_1_54 = io_w_payload[407 : 400];
  assign _zz__zz_acc_0_1_55 = io_w_payload[415 : 408];
  assign _zz__zz_acc_0_1_56 = io_w_payload[423 : 416];
  assign _zz__zz_acc_0_1_57 = io_w_payload[431 : 424];
  assign _zz__zz_acc_0_1_58 = io_w_payload[439 : 432];
  assign _zz__zz_acc_0_1_59 = io_w_payload[447 : 440];
  assign _zz__zz_acc_0_1_60 = io_w_payload[455 : 448];
  assign _zz__zz_acc_0_1_61 = io_w_payload[463 : 456];
  assign _zz__zz_acc_0_1_62 = io_w_payload[471 : 464];
  assign _zz__zz_acc_0_1_63 = io_w_payload[479 : 472];
  assign _zz__zz_acc_0_1_64 = io_w_payload[487 : 480];
  assign _zz__zz_acc_0_1_65 = io_w_payload[495 : 488];
  assign _zz__zz_acc_0_1_66 = io_w_payload[503 : 496];
  assign _zz__zz_acc_0_1_67 = io_w_payload[511 : 504];
  always @(*) begin
    case(cnt_w_value)
      6'b000000 : begin
        _zz__zz_acc_0_1 = acc_0;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_4;
      end
      6'b000001 : begin
        _zz__zz_acc_0_1 = acc_1;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_5;
      end
      6'b000010 : begin
        _zz__zz_acc_0_1 = acc_2;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_6;
      end
      6'b000011 : begin
        _zz__zz_acc_0_1 = acc_3;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_7;
      end
      6'b000100 : begin
        _zz__zz_acc_0_1 = acc_4;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_8;
      end
      6'b000101 : begin
        _zz__zz_acc_0_1 = acc_5;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_9;
      end
      6'b000110 : begin
        _zz__zz_acc_0_1 = acc_6;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_10;
      end
      6'b000111 : begin
        _zz__zz_acc_0_1 = acc_7;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_11;
      end
      6'b001000 : begin
        _zz__zz_acc_0_1 = acc_8;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_12;
      end
      6'b001001 : begin
        _zz__zz_acc_0_1 = acc_9;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_13;
      end
      6'b001010 : begin
        _zz__zz_acc_0_1 = acc_10;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_14;
      end
      6'b001011 : begin
        _zz__zz_acc_0_1 = acc_11;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_15;
      end
      6'b001100 : begin
        _zz__zz_acc_0_1 = acc_12;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_16;
      end
      6'b001101 : begin
        _zz__zz_acc_0_1 = acc_13;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_17;
      end
      6'b001110 : begin
        _zz__zz_acc_0_1 = acc_14;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_18;
      end
      6'b001111 : begin
        _zz__zz_acc_0_1 = acc_15;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_19;
      end
      6'b010000 : begin
        _zz__zz_acc_0_1 = acc_16;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_20;
      end
      6'b010001 : begin
        _zz__zz_acc_0_1 = acc_17;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_21;
      end
      6'b010010 : begin
        _zz__zz_acc_0_1 = acc_18;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_22;
      end
      6'b010011 : begin
        _zz__zz_acc_0_1 = acc_19;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_23;
      end
      6'b010100 : begin
        _zz__zz_acc_0_1 = acc_20;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_24;
      end
      6'b010101 : begin
        _zz__zz_acc_0_1 = acc_21;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_25;
      end
      6'b010110 : begin
        _zz__zz_acc_0_1 = acc_22;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_26;
      end
      6'b010111 : begin
        _zz__zz_acc_0_1 = acc_23;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_27;
      end
      6'b011000 : begin
        _zz__zz_acc_0_1 = acc_24;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_28;
      end
      6'b011001 : begin
        _zz__zz_acc_0_1 = acc_25;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_29;
      end
      6'b011010 : begin
        _zz__zz_acc_0_1 = acc_26;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_30;
      end
      6'b011011 : begin
        _zz__zz_acc_0_1 = acc_27;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_31;
      end
      6'b011100 : begin
        _zz__zz_acc_0_1 = acc_28;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_32;
      end
      6'b011101 : begin
        _zz__zz_acc_0_1 = acc_29;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_33;
      end
      6'b011110 : begin
        _zz__zz_acc_0_1 = acc_30;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_34;
      end
      6'b011111 : begin
        _zz__zz_acc_0_1 = acc_31;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_35;
      end
      6'b100000 : begin
        _zz__zz_acc_0_1 = acc_32;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_36;
      end
      6'b100001 : begin
        _zz__zz_acc_0_1 = acc_33;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_37;
      end
      6'b100010 : begin
        _zz__zz_acc_0_1 = acc_34;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_38;
      end
      6'b100011 : begin
        _zz__zz_acc_0_1 = acc_35;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_39;
      end
      6'b100100 : begin
        _zz__zz_acc_0_1 = acc_36;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_40;
      end
      6'b100101 : begin
        _zz__zz_acc_0_1 = acc_37;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_41;
      end
      6'b100110 : begin
        _zz__zz_acc_0_1 = acc_38;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_42;
      end
      6'b100111 : begin
        _zz__zz_acc_0_1 = acc_39;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_43;
      end
      6'b101000 : begin
        _zz__zz_acc_0_1 = acc_40;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_44;
      end
      6'b101001 : begin
        _zz__zz_acc_0_1 = acc_41;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_45;
      end
      6'b101010 : begin
        _zz__zz_acc_0_1 = acc_42;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_46;
      end
      6'b101011 : begin
        _zz__zz_acc_0_1 = acc_43;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_47;
      end
      6'b101100 : begin
        _zz__zz_acc_0_1 = acc_44;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_48;
      end
      6'b101101 : begin
        _zz__zz_acc_0_1 = acc_45;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_49;
      end
      6'b101110 : begin
        _zz__zz_acc_0_1 = acc_46;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_50;
      end
      6'b101111 : begin
        _zz__zz_acc_0_1 = acc_47;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_51;
      end
      6'b110000 : begin
        _zz__zz_acc_0_1 = acc_48;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_52;
      end
      6'b110001 : begin
        _zz__zz_acc_0_1 = acc_49;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_53;
      end
      6'b110010 : begin
        _zz__zz_acc_0_1 = acc_50;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_54;
      end
      6'b110011 : begin
        _zz__zz_acc_0_1 = acc_51;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_55;
      end
      6'b110100 : begin
        _zz__zz_acc_0_1 = acc_52;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_56;
      end
      6'b110101 : begin
        _zz__zz_acc_0_1 = acc_53;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_57;
      end
      6'b110110 : begin
        _zz__zz_acc_0_1 = acc_54;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_58;
      end
      6'b110111 : begin
        _zz__zz_acc_0_1 = acc_55;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_59;
      end
      6'b111000 : begin
        _zz__zz_acc_0_1 = acc_56;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_60;
      end
      6'b111001 : begin
        _zz__zz_acc_0_1 = acc_57;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_61;
      end
      6'b111010 : begin
        _zz__zz_acc_0_1 = acc_58;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_62;
      end
      6'b111011 : begin
        _zz__zz_acc_0_1 = acc_59;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_63;
      end
      6'b111100 : begin
        _zz__zz_acc_0_1 = acc_60;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_64;
      end
      6'b111101 : begin
        _zz__zz_acc_0_1 = acc_61;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_65;
      end
      6'b111110 : begin
        _zz__zz_acc_0_1 = acc_62;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_66;
      end
      default : begin
        _zz__zz_acc_0_1 = acc_63;
        _zz__zz_acc_0_1_3 = _zz__zz_acc_0_1_67;
      end
    endcase
  end

  always @(*) begin
    case(_zz__zz_acc_0_1_2)
      8'b00000000 : _zz__zz_acc_0_1_1 = x_reg_0;
      8'b00000001 : _zz__zz_acc_0_1_1 = x_reg_1;
      8'b00000010 : _zz__zz_acc_0_1_1 = x_reg_2;
      8'b00000011 : _zz__zz_acc_0_1_1 = x_reg_3;
      8'b00000100 : _zz__zz_acc_0_1_1 = x_reg_4;
      8'b00000101 : _zz__zz_acc_0_1_1 = x_reg_5;
      8'b00000110 : _zz__zz_acc_0_1_1 = x_reg_6;
      8'b00000111 : _zz__zz_acc_0_1_1 = x_reg_7;
      8'b00001000 : _zz__zz_acc_0_1_1 = x_reg_8;
      8'b00001001 : _zz__zz_acc_0_1_1 = x_reg_9;
      8'b00001010 : _zz__zz_acc_0_1_1 = x_reg_10;
      8'b00001011 : _zz__zz_acc_0_1_1 = x_reg_11;
      8'b00001100 : _zz__zz_acc_0_1_1 = x_reg_12;
      8'b00001101 : _zz__zz_acc_0_1_1 = x_reg_13;
      8'b00001110 : _zz__zz_acc_0_1_1 = x_reg_14;
      8'b00001111 : _zz__zz_acc_0_1_1 = x_reg_15;
      8'b00010000 : _zz__zz_acc_0_1_1 = x_reg_16;
      8'b00010001 : _zz__zz_acc_0_1_1 = x_reg_17;
      8'b00010010 : _zz__zz_acc_0_1_1 = x_reg_18;
      8'b00010011 : _zz__zz_acc_0_1_1 = x_reg_19;
      8'b00010100 : _zz__zz_acc_0_1_1 = x_reg_20;
      8'b00010101 : _zz__zz_acc_0_1_1 = x_reg_21;
      8'b00010110 : _zz__zz_acc_0_1_1 = x_reg_22;
      8'b00010111 : _zz__zz_acc_0_1_1 = x_reg_23;
      8'b00011000 : _zz__zz_acc_0_1_1 = x_reg_24;
      8'b00011001 : _zz__zz_acc_0_1_1 = x_reg_25;
      8'b00011010 : _zz__zz_acc_0_1_1 = x_reg_26;
      8'b00011011 : _zz__zz_acc_0_1_1 = x_reg_27;
      8'b00011100 : _zz__zz_acc_0_1_1 = x_reg_28;
      8'b00011101 : _zz__zz_acc_0_1_1 = x_reg_29;
      8'b00011110 : _zz__zz_acc_0_1_1 = x_reg_30;
      8'b00011111 : _zz__zz_acc_0_1_1 = x_reg_31;
      8'b00100000 : _zz__zz_acc_0_1_1 = x_reg_32;
      8'b00100001 : _zz__zz_acc_0_1_1 = x_reg_33;
      8'b00100010 : _zz__zz_acc_0_1_1 = x_reg_34;
      8'b00100011 : _zz__zz_acc_0_1_1 = x_reg_35;
      8'b00100100 : _zz__zz_acc_0_1_1 = x_reg_36;
      8'b00100101 : _zz__zz_acc_0_1_1 = x_reg_37;
      8'b00100110 : _zz__zz_acc_0_1_1 = x_reg_38;
      8'b00100111 : _zz__zz_acc_0_1_1 = x_reg_39;
      8'b00101000 : _zz__zz_acc_0_1_1 = x_reg_40;
      8'b00101001 : _zz__zz_acc_0_1_1 = x_reg_41;
      8'b00101010 : _zz__zz_acc_0_1_1 = x_reg_42;
      8'b00101011 : _zz__zz_acc_0_1_1 = x_reg_43;
      8'b00101100 : _zz__zz_acc_0_1_1 = x_reg_44;
      8'b00101101 : _zz__zz_acc_0_1_1 = x_reg_45;
      8'b00101110 : _zz__zz_acc_0_1_1 = x_reg_46;
      8'b00101111 : _zz__zz_acc_0_1_1 = x_reg_47;
      8'b00110000 : _zz__zz_acc_0_1_1 = x_reg_48;
      8'b00110001 : _zz__zz_acc_0_1_1 = x_reg_49;
      8'b00110010 : _zz__zz_acc_0_1_1 = x_reg_50;
      8'b00110011 : _zz__zz_acc_0_1_1 = x_reg_51;
      8'b00110100 : _zz__zz_acc_0_1_1 = x_reg_52;
      8'b00110101 : _zz__zz_acc_0_1_1 = x_reg_53;
      8'b00110110 : _zz__zz_acc_0_1_1 = x_reg_54;
      8'b00110111 : _zz__zz_acc_0_1_1 = x_reg_55;
      8'b00111000 : _zz__zz_acc_0_1_1 = x_reg_56;
      8'b00111001 : _zz__zz_acc_0_1_1 = x_reg_57;
      8'b00111010 : _zz__zz_acc_0_1_1 = x_reg_58;
      8'b00111011 : _zz__zz_acc_0_1_1 = x_reg_59;
      8'b00111100 : _zz__zz_acc_0_1_1 = x_reg_60;
      8'b00111101 : _zz__zz_acc_0_1_1 = x_reg_61;
      8'b00111110 : _zz__zz_acc_0_1_1 = x_reg_62;
      8'b00111111 : _zz__zz_acc_0_1_1 = x_reg_63;
      8'b01000000 : _zz__zz_acc_0_1_1 = x_reg_64;
      8'b01000001 : _zz__zz_acc_0_1_1 = x_reg_65;
      8'b01000010 : _zz__zz_acc_0_1_1 = x_reg_66;
      8'b01000011 : _zz__zz_acc_0_1_1 = x_reg_67;
      8'b01000100 : _zz__zz_acc_0_1_1 = x_reg_68;
      8'b01000101 : _zz__zz_acc_0_1_1 = x_reg_69;
      8'b01000110 : _zz__zz_acc_0_1_1 = x_reg_70;
      8'b01000111 : _zz__zz_acc_0_1_1 = x_reg_71;
      8'b01001000 : _zz__zz_acc_0_1_1 = x_reg_72;
      8'b01001001 : _zz__zz_acc_0_1_1 = x_reg_73;
      8'b01001010 : _zz__zz_acc_0_1_1 = x_reg_74;
      8'b01001011 : _zz__zz_acc_0_1_1 = x_reg_75;
      8'b01001100 : _zz__zz_acc_0_1_1 = x_reg_76;
      8'b01001101 : _zz__zz_acc_0_1_1 = x_reg_77;
      8'b01001110 : _zz__zz_acc_0_1_1 = x_reg_78;
      8'b01001111 : _zz__zz_acc_0_1_1 = x_reg_79;
      8'b01010000 : _zz__zz_acc_0_1_1 = x_reg_80;
      8'b01010001 : _zz__zz_acc_0_1_1 = x_reg_81;
      8'b01010010 : _zz__zz_acc_0_1_1 = x_reg_82;
      8'b01010011 : _zz__zz_acc_0_1_1 = x_reg_83;
      8'b01010100 : _zz__zz_acc_0_1_1 = x_reg_84;
      8'b01010101 : _zz__zz_acc_0_1_1 = x_reg_85;
      8'b01010110 : _zz__zz_acc_0_1_1 = x_reg_86;
      8'b01010111 : _zz__zz_acc_0_1_1 = x_reg_87;
      8'b01011000 : _zz__zz_acc_0_1_1 = x_reg_88;
      8'b01011001 : _zz__zz_acc_0_1_1 = x_reg_89;
      8'b01011010 : _zz__zz_acc_0_1_1 = x_reg_90;
      8'b01011011 : _zz__zz_acc_0_1_1 = x_reg_91;
      8'b01011100 : _zz__zz_acc_0_1_1 = x_reg_92;
      8'b01011101 : _zz__zz_acc_0_1_1 = x_reg_93;
      8'b01011110 : _zz__zz_acc_0_1_1 = x_reg_94;
      8'b01011111 : _zz__zz_acc_0_1_1 = x_reg_95;
      8'b01100000 : _zz__zz_acc_0_1_1 = x_reg_96;
      8'b01100001 : _zz__zz_acc_0_1_1 = x_reg_97;
      8'b01100010 : _zz__zz_acc_0_1_1 = x_reg_98;
      8'b01100011 : _zz__zz_acc_0_1_1 = x_reg_99;
      8'b01100100 : _zz__zz_acc_0_1_1 = x_reg_100;
      8'b01100101 : _zz__zz_acc_0_1_1 = x_reg_101;
      8'b01100110 : _zz__zz_acc_0_1_1 = x_reg_102;
      8'b01100111 : _zz__zz_acc_0_1_1 = x_reg_103;
      8'b01101000 : _zz__zz_acc_0_1_1 = x_reg_104;
      8'b01101001 : _zz__zz_acc_0_1_1 = x_reg_105;
      8'b01101010 : _zz__zz_acc_0_1_1 = x_reg_106;
      8'b01101011 : _zz__zz_acc_0_1_1 = x_reg_107;
      8'b01101100 : _zz__zz_acc_0_1_1 = x_reg_108;
      8'b01101101 : _zz__zz_acc_0_1_1 = x_reg_109;
      8'b01101110 : _zz__zz_acc_0_1_1 = x_reg_110;
      8'b01101111 : _zz__zz_acc_0_1_1 = x_reg_111;
      8'b01110000 : _zz__zz_acc_0_1_1 = x_reg_112;
      8'b01110001 : _zz__zz_acc_0_1_1 = x_reg_113;
      8'b01110010 : _zz__zz_acc_0_1_1 = x_reg_114;
      8'b01110011 : _zz__zz_acc_0_1_1 = x_reg_115;
      8'b01110100 : _zz__zz_acc_0_1_1 = x_reg_116;
      8'b01110101 : _zz__zz_acc_0_1_1 = x_reg_117;
      8'b01110110 : _zz__zz_acc_0_1_1 = x_reg_118;
      8'b01110111 : _zz__zz_acc_0_1_1 = x_reg_119;
      8'b01111000 : _zz__zz_acc_0_1_1 = x_reg_120;
      8'b01111001 : _zz__zz_acc_0_1_1 = x_reg_121;
      8'b01111010 : _zz__zz_acc_0_1_1 = x_reg_122;
      8'b01111011 : _zz__zz_acc_0_1_1 = x_reg_123;
      8'b01111100 : _zz__zz_acc_0_1_1 = x_reg_124;
      8'b01111101 : _zz__zz_acc_0_1_1 = x_reg_125;
      8'b01111110 : _zz__zz_acc_0_1_1 = x_reg_126;
      8'b01111111 : _zz__zz_acc_0_1_1 = x_reg_127;
      8'b10000000 : _zz__zz_acc_0_1_1 = x_reg_128;
      8'b10000001 : _zz__zz_acc_0_1_1 = x_reg_129;
      8'b10000010 : _zz__zz_acc_0_1_1 = x_reg_130;
      8'b10000011 : _zz__zz_acc_0_1_1 = x_reg_131;
      8'b10000100 : _zz__zz_acc_0_1_1 = x_reg_132;
      8'b10000101 : _zz__zz_acc_0_1_1 = x_reg_133;
      8'b10000110 : _zz__zz_acc_0_1_1 = x_reg_134;
      8'b10000111 : _zz__zz_acc_0_1_1 = x_reg_135;
      8'b10001000 : _zz__zz_acc_0_1_1 = x_reg_136;
      8'b10001001 : _zz__zz_acc_0_1_1 = x_reg_137;
      8'b10001010 : _zz__zz_acc_0_1_1 = x_reg_138;
      8'b10001011 : _zz__zz_acc_0_1_1 = x_reg_139;
      8'b10001100 : _zz__zz_acc_0_1_1 = x_reg_140;
      8'b10001101 : _zz__zz_acc_0_1_1 = x_reg_141;
      8'b10001110 : _zz__zz_acc_0_1_1 = x_reg_142;
      8'b10001111 : _zz__zz_acc_0_1_1 = x_reg_143;
      8'b10010000 : _zz__zz_acc_0_1_1 = x_reg_144;
      8'b10010001 : _zz__zz_acc_0_1_1 = x_reg_145;
      8'b10010010 : _zz__zz_acc_0_1_1 = x_reg_146;
      8'b10010011 : _zz__zz_acc_0_1_1 = x_reg_147;
      8'b10010100 : _zz__zz_acc_0_1_1 = x_reg_148;
      8'b10010101 : _zz__zz_acc_0_1_1 = x_reg_149;
      8'b10010110 : _zz__zz_acc_0_1_1 = x_reg_150;
      8'b10010111 : _zz__zz_acc_0_1_1 = x_reg_151;
      8'b10011000 : _zz__zz_acc_0_1_1 = x_reg_152;
      8'b10011001 : _zz__zz_acc_0_1_1 = x_reg_153;
      8'b10011010 : _zz__zz_acc_0_1_1 = x_reg_154;
      8'b10011011 : _zz__zz_acc_0_1_1 = x_reg_155;
      8'b10011100 : _zz__zz_acc_0_1_1 = x_reg_156;
      8'b10011101 : _zz__zz_acc_0_1_1 = x_reg_157;
      8'b10011110 : _zz__zz_acc_0_1_1 = x_reg_158;
      8'b10011111 : _zz__zz_acc_0_1_1 = x_reg_159;
      8'b10100000 : _zz__zz_acc_0_1_1 = x_reg_160;
      8'b10100001 : _zz__zz_acc_0_1_1 = x_reg_161;
      8'b10100010 : _zz__zz_acc_0_1_1 = x_reg_162;
      8'b10100011 : _zz__zz_acc_0_1_1 = x_reg_163;
      8'b10100100 : _zz__zz_acc_0_1_1 = x_reg_164;
      8'b10100101 : _zz__zz_acc_0_1_1 = x_reg_165;
      8'b10100110 : _zz__zz_acc_0_1_1 = x_reg_166;
      8'b10100111 : _zz__zz_acc_0_1_1 = x_reg_167;
      8'b10101000 : _zz__zz_acc_0_1_1 = x_reg_168;
      8'b10101001 : _zz__zz_acc_0_1_1 = x_reg_169;
      8'b10101010 : _zz__zz_acc_0_1_1 = x_reg_170;
      8'b10101011 : _zz__zz_acc_0_1_1 = x_reg_171;
      8'b10101100 : _zz__zz_acc_0_1_1 = x_reg_172;
      8'b10101101 : _zz__zz_acc_0_1_1 = x_reg_173;
      8'b10101110 : _zz__zz_acc_0_1_1 = x_reg_174;
      8'b10101111 : _zz__zz_acc_0_1_1 = x_reg_175;
      8'b10110000 : _zz__zz_acc_0_1_1 = x_reg_176;
      8'b10110001 : _zz__zz_acc_0_1_1 = x_reg_177;
      8'b10110010 : _zz__zz_acc_0_1_1 = x_reg_178;
      8'b10110011 : _zz__zz_acc_0_1_1 = x_reg_179;
      8'b10110100 : _zz__zz_acc_0_1_1 = x_reg_180;
      8'b10110101 : _zz__zz_acc_0_1_1 = x_reg_181;
      8'b10110110 : _zz__zz_acc_0_1_1 = x_reg_182;
      8'b10110111 : _zz__zz_acc_0_1_1 = x_reg_183;
      8'b10111000 : _zz__zz_acc_0_1_1 = x_reg_184;
      8'b10111001 : _zz__zz_acc_0_1_1 = x_reg_185;
      8'b10111010 : _zz__zz_acc_0_1_1 = x_reg_186;
      8'b10111011 : _zz__zz_acc_0_1_1 = x_reg_187;
      8'b10111100 : _zz__zz_acc_0_1_1 = x_reg_188;
      8'b10111101 : _zz__zz_acc_0_1_1 = x_reg_189;
      8'b10111110 : _zz__zz_acc_0_1_1 = x_reg_190;
      8'b10111111 : _zz__zz_acc_0_1_1 = x_reg_191;
      8'b11000000 : _zz__zz_acc_0_1_1 = x_reg_192;
      8'b11000001 : _zz__zz_acc_0_1_1 = x_reg_193;
      8'b11000010 : _zz__zz_acc_0_1_1 = x_reg_194;
      8'b11000011 : _zz__zz_acc_0_1_1 = x_reg_195;
      8'b11000100 : _zz__zz_acc_0_1_1 = x_reg_196;
      8'b11000101 : _zz__zz_acc_0_1_1 = x_reg_197;
      8'b11000110 : _zz__zz_acc_0_1_1 = x_reg_198;
      8'b11000111 : _zz__zz_acc_0_1_1 = x_reg_199;
      8'b11001000 : _zz__zz_acc_0_1_1 = x_reg_200;
      8'b11001001 : _zz__zz_acc_0_1_1 = x_reg_201;
      8'b11001010 : _zz__zz_acc_0_1_1 = x_reg_202;
      8'b11001011 : _zz__zz_acc_0_1_1 = x_reg_203;
      8'b11001100 : _zz__zz_acc_0_1_1 = x_reg_204;
      8'b11001101 : _zz__zz_acc_0_1_1 = x_reg_205;
      8'b11001110 : _zz__zz_acc_0_1_1 = x_reg_206;
      8'b11001111 : _zz__zz_acc_0_1_1 = x_reg_207;
      8'b11010000 : _zz__zz_acc_0_1_1 = x_reg_208;
      8'b11010001 : _zz__zz_acc_0_1_1 = x_reg_209;
      8'b11010010 : _zz__zz_acc_0_1_1 = x_reg_210;
      8'b11010011 : _zz__zz_acc_0_1_1 = x_reg_211;
      8'b11010100 : _zz__zz_acc_0_1_1 = x_reg_212;
      8'b11010101 : _zz__zz_acc_0_1_1 = x_reg_213;
      8'b11010110 : _zz__zz_acc_0_1_1 = x_reg_214;
      8'b11010111 : _zz__zz_acc_0_1_1 = x_reg_215;
      8'b11011000 : _zz__zz_acc_0_1_1 = x_reg_216;
      8'b11011001 : _zz__zz_acc_0_1_1 = x_reg_217;
      8'b11011010 : _zz__zz_acc_0_1_1 = x_reg_218;
      8'b11011011 : _zz__zz_acc_0_1_1 = x_reg_219;
      8'b11011100 : _zz__zz_acc_0_1_1 = x_reg_220;
      8'b11011101 : _zz__zz_acc_0_1_1 = x_reg_221;
      8'b11011110 : _zz__zz_acc_0_1_1 = x_reg_222;
      8'b11011111 : _zz__zz_acc_0_1_1 = x_reg_223;
      8'b11100000 : _zz__zz_acc_0_1_1 = x_reg_224;
      8'b11100001 : _zz__zz_acc_0_1_1 = x_reg_225;
      8'b11100010 : _zz__zz_acc_0_1_1 = x_reg_226;
      8'b11100011 : _zz__zz_acc_0_1_1 = x_reg_227;
      8'b11100100 : _zz__zz_acc_0_1_1 = x_reg_228;
      8'b11100101 : _zz__zz_acc_0_1_1 = x_reg_229;
      8'b11100110 : _zz__zz_acc_0_1_1 = x_reg_230;
      8'b11100111 : _zz__zz_acc_0_1_1 = x_reg_231;
      8'b11101000 : _zz__zz_acc_0_1_1 = x_reg_232;
      8'b11101001 : _zz__zz_acc_0_1_1 = x_reg_233;
      8'b11101010 : _zz__zz_acc_0_1_1 = x_reg_234;
      8'b11101011 : _zz__zz_acc_0_1_1 = x_reg_235;
      8'b11101100 : _zz__zz_acc_0_1_1 = x_reg_236;
      8'b11101101 : _zz__zz_acc_0_1_1 = x_reg_237;
      8'b11101110 : _zz__zz_acc_0_1_1 = x_reg_238;
      8'b11101111 : _zz__zz_acc_0_1_1 = x_reg_239;
      8'b11110000 : _zz__zz_acc_0_1_1 = x_reg_240;
      8'b11110001 : _zz__zz_acc_0_1_1 = x_reg_241;
      8'b11110010 : _zz__zz_acc_0_1_1 = x_reg_242;
      8'b11110011 : _zz__zz_acc_0_1_1 = x_reg_243;
      8'b11110100 : _zz__zz_acc_0_1_1 = x_reg_244;
      8'b11110101 : _zz__zz_acc_0_1_1 = x_reg_245;
      8'b11110110 : _zz__zz_acc_0_1_1 = x_reg_246;
      8'b11110111 : _zz__zz_acc_0_1_1 = x_reg_247;
      8'b11111000 : _zz__zz_acc_0_1_1 = x_reg_248;
      8'b11111001 : _zz__zz_acc_0_1_1 = x_reg_249;
      8'b11111010 : _zz__zz_acc_0_1_1 = x_reg_250;
      8'b11111011 : _zz__zz_acc_0_1_1 = x_reg_251;
      8'b11111100 : _zz__zz_acc_0_1_1 = x_reg_252;
      8'b11111101 : _zz__zz_acc_0_1_1 = x_reg_253;
      8'b11111110 : _zz__zz_acc_0_1_1 = x_reg_254;
      default : _zz__zz_acc_0_1_1 = x_reg_255;
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(FSM_W_stateReg)
      FSM_W_BOOT : FSM_W_stateReg_string = "BOOT       ";
      FSM_W_WAIT_WEIGHT : FSM_W_stateReg_string = "WAIT_WEIGHT";
      FSM_W_PROCESSING : FSM_W_stateReg_string = "PROCESSING ";
      default : FSM_W_stateReg_string = "???????????";
    endcase
  end
  always @(*) begin
    case(FSM_W_stateNext)
      FSM_W_BOOT : FSM_W_stateNext_string = "BOOT       ";
      FSM_W_WAIT_WEIGHT : FSM_W_stateNext_string = "WAIT_WEIGHT";
      FSM_W_PROCESSING : FSM_W_stateNext_string = "PROCESSING ";
      default : FSM_W_stateNext_string = "???????????";
    endcase
  end
  `endif

  always @(*) begin
    io_w_ready = 1'b0;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
        io_w_ready = 1'b1;
      end
      FSM_W_PROCESSING : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_done_acc = 1'b0;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
      end
      FSM_W_PROCESSING : begin
        if(cnt_w_willOverflow) begin
          io_done_acc = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign _zz_acc_0 = 1024'h0;
  assign when_PE_l36 = io_enable_X[0];
  assign when_PE_l36_1 = io_enable_X[1];
  assign when_PE_l36_2 = io_enable_X[2];
  assign when_PE_l36_3 = io_enable_X[3];
  assign when_PE_l36_4 = io_enable_X[4];
  assign when_PE_l36_5 = io_enable_X[5];
  assign when_PE_l36_6 = io_enable_X[6];
  assign when_PE_l36_7 = io_enable_X[7];
  always @(*) begin
    cnt_w_willIncrement = 1'b0;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
      end
      FSM_W_PROCESSING : begin
        cnt_w_willIncrement = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_w_willClear = 1'b0;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
        cnt_w_willClear = 1'b1;
      end
      FSM_W_PROCESSING : begin
      end
      default : begin
      end
    endcase
    if(FSM_W_onEntry_WAIT_WEIGHT) begin
      cnt_w_willClear = 1'b1;
    end
  end

  assign cnt_w_willOverflowIfInc = (cnt_w_value == 6'h3f);
  assign cnt_w_willOverflow = (cnt_w_willOverflowIfInc && cnt_w_willIncrement);
  always @(*) begin
    cnt_w_valueNext = (cnt_w_value + _zz_cnt_w_valueNext);
    if(cnt_w_willClear) begin
      cnt_w_valueNext = 6'h0;
    end
  end

  assign FSM_W_wantExit = 1'b0;
  always @(*) begin
    FSM_W_wantStart = 1'b0;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
      end
      FSM_W_PROCESSING : begin
      end
      default : begin
        FSM_W_wantStart = 1'b1;
      end
    endcase
  end

  assign FSM_W_wantKill = 1'b0;
  always @(*) begin
    io_y[15 : 0] = _zz_io_y;
    io_y[31 : 16] = _zz_io_y_1;
    io_y[47 : 32] = _zz_io_y_2;
    io_y[63 : 48] = _zz_io_y_3;
    io_y[79 : 64] = _zz_io_y_4;
    io_y[95 : 80] = _zz_io_y_5;
    io_y[111 : 96] = _zz_io_y_6;
    io_y[127 : 112] = _zz_io_y_7;
    io_y[143 : 128] = _zz_io_y_8;
    io_y[159 : 144] = _zz_io_y_9;
    io_y[175 : 160] = _zz_io_y_10;
    io_y[191 : 176] = _zz_io_y_11;
    io_y[207 : 192] = _zz_io_y_12;
    io_y[223 : 208] = _zz_io_y_13;
    io_y[239 : 224] = _zz_io_y_14;
    io_y[255 : 240] = _zz_io_y_15;
    io_y[271 : 256] = _zz_io_y_16;
    io_y[287 : 272] = _zz_io_y_17;
    io_y[303 : 288] = _zz_io_y_18;
    io_y[319 : 304] = _zz_io_y_19;
    io_y[335 : 320] = _zz_io_y_20;
    io_y[351 : 336] = _zz_io_y_21;
    io_y[367 : 352] = _zz_io_y_22;
    io_y[383 : 368] = _zz_io_y_23;
    io_y[399 : 384] = _zz_io_y_24;
    io_y[415 : 400] = _zz_io_y_25;
    io_y[431 : 416] = _zz_io_y_26;
    io_y[447 : 432] = _zz_io_y_27;
    io_y[463 : 448] = _zz_io_y_28;
    io_y[479 : 464] = _zz_io_y_29;
    io_y[495 : 480] = _zz_io_y_30;
    io_y[511 : 496] = _zz_io_y_31;
  end

  always @(*) begin
    FSM_W_stateNext = FSM_W_stateReg;
    case(FSM_W_stateReg)
      FSM_W_WAIT_WEIGHT : begin
        if(io_w_fire) begin
          FSM_W_stateNext = FSM_W_PROCESSING;
        end
      end
      FSM_W_PROCESSING : begin
        if(cnt_w_willOverflow) begin
          FSM_W_stateNext = FSM_W_WAIT_WEIGHT;
        end
      end
      default : begin
      end
    endcase
    if(FSM_W_wantStart) begin
      FSM_W_stateNext = FSM_W_WAIT_WEIGHT;
    end
    if(FSM_W_wantKill) begin
      FSM_W_stateNext = FSM_W_BOOT;
    end
  end

  assign io_w_fire = (io_w_valid && io_w_ready);
  assign _zz_1 = ({63'd0,1'b1} <<< cnt_w_value);
  assign _zz_acc_0_1 = ($signed(_zz__zz_acc_0_1) + $signed(_zz__zz_acc_0_1_1));
  assign FSM_W_onExit_BOOT = ((FSM_W_stateNext != FSM_W_BOOT) && (FSM_W_stateReg == FSM_W_BOOT));
  assign FSM_W_onExit_WAIT_WEIGHT = ((FSM_W_stateNext != FSM_W_WAIT_WEIGHT) && (FSM_W_stateReg == FSM_W_WAIT_WEIGHT));
  assign FSM_W_onExit_PROCESSING = ((FSM_W_stateNext != FSM_W_PROCESSING) && (FSM_W_stateReg == FSM_W_PROCESSING));
  assign FSM_W_onEntry_BOOT = ((FSM_W_stateNext == FSM_W_BOOT) && (FSM_W_stateReg != FSM_W_BOOT));
  assign FSM_W_onEntry_WAIT_WEIGHT = ((FSM_W_stateNext == FSM_W_WAIT_WEIGHT) && (FSM_W_stateReg != FSM_W_WAIT_WEIGHT));
  assign FSM_W_onEntry_PROCESSING = ((FSM_W_stateNext == FSM_W_PROCESSING) && (FSM_W_stateReg != FSM_W_PROCESSING));
  always @(posedge clk) begin
    if(!resetn) begin
      x_reg_0 <= 16'h0;
      x_reg_1 <= 16'h0;
      x_reg_2 <= 16'h0;
      x_reg_3 <= 16'h0;
      x_reg_4 <= 16'h0;
      x_reg_5 <= 16'h0;
      x_reg_6 <= 16'h0;
      x_reg_7 <= 16'h0;
      x_reg_8 <= 16'h0;
      x_reg_9 <= 16'h0;
      x_reg_10 <= 16'h0;
      x_reg_11 <= 16'h0;
      x_reg_12 <= 16'h0;
      x_reg_13 <= 16'h0;
      x_reg_14 <= 16'h0;
      x_reg_15 <= 16'h0;
      x_reg_16 <= 16'h0;
      x_reg_17 <= 16'h0;
      x_reg_18 <= 16'h0;
      x_reg_19 <= 16'h0;
      x_reg_20 <= 16'h0;
      x_reg_21 <= 16'h0;
      x_reg_22 <= 16'h0;
      x_reg_23 <= 16'h0;
      x_reg_24 <= 16'h0;
      x_reg_25 <= 16'h0;
      x_reg_26 <= 16'h0;
      x_reg_27 <= 16'h0;
      x_reg_28 <= 16'h0;
      x_reg_29 <= 16'h0;
      x_reg_30 <= 16'h0;
      x_reg_31 <= 16'h0;
      x_reg_32 <= 16'h0;
      x_reg_33 <= 16'h0;
      x_reg_34 <= 16'h0;
      x_reg_35 <= 16'h0;
      x_reg_36 <= 16'h0;
      x_reg_37 <= 16'h0;
      x_reg_38 <= 16'h0;
      x_reg_39 <= 16'h0;
      x_reg_40 <= 16'h0;
      x_reg_41 <= 16'h0;
      x_reg_42 <= 16'h0;
      x_reg_43 <= 16'h0;
      x_reg_44 <= 16'h0;
      x_reg_45 <= 16'h0;
      x_reg_46 <= 16'h0;
      x_reg_47 <= 16'h0;
      x_reg_48 <= 16'h0;
      x_reg_49 <= 16'h0;
      x_reg_50 <= 16'h0;
      x_reg_51 <= 16'h0;
      x_reg_52 <= 16'h0;
      x_reg_53 <= 16'h0;
      x_reg_54 <= 16'h0;
      x_reg_55 <= 16'h0;
      x_reg_56 <= 16'h0;
      x_reg_57 <= 16'h0;
      x_reg_58 <= 16'h0;
      x_reg_59 <= 16'h0;
      x_reg_60 <= 16'h0;
      x_reg_61 <= 16'h0;
      x_reg_62 <= 16'h0;
      x_reg_63 <= 16'h0;
      x_reg_64 <= 16'h0;
      x_reg_65 <= 16'h0;
      x_reg_66 <= 16'h0;
      x_reg_67 <= 16'h0;
      x_reg_68 <= 16'h0;
      x_reg_69 <= 16'h0;
      x_reg_70 <= 16'h0;
      x_reg_71 <= 16'h0;
      x_reg_72 <= 16'h0;
      x_reg_73 <= 16'h0;
      x_reg_74 <= 16'h0;
      x_reg_75 <= 16'h0;
      x_reg_76 <= 16'h0;
      x_reg_77 <= 16'h0;
      x_reg_78 <= 16'h0;
      x_reg_79 <= 16'h0;
      x_reg_80 <= 16'h0;
      x_reg_81 <= 16'h0;
      x_reg_82 <= 16'h0;
      x_reg_83 <= 16'h0;
      x_reg_84 <= 16'h0;
      x_reg_85 <= 16'h0;
      x_reg_86 <= 16'h0;
      x_reg_87 <= 16'h0;
      x_reg_88 <= 16'h0;
      x_reg_89 <= 16'h0;
      x_reg_90 <= 16'h0;
      x_reg_91 <= 16'h0;
      x_reg_92 <= 16'h0;
      x_reg_93 <= 16'h0;
      x_reg_94 <= 16'h0;
      x_reg_95 <= 16'h0;
      x_reg_96 <= 16'h0;
      x_reg_97 <= 16'h0;
      x_reg_98 <= 16'h0;
      x_reg_99 <= 16'h0;
      x_reg_100 <= 16'h0;
      x_reg_101 <= 16'h0;
      x_reg_102 <= 16'h0;
      x_reg_103 <= 16'h0;
      x_reg_104 <= 16'h0;
      x_reg_105 <= 16'h0;
      x_reg_106 <= 16'h0;
      x_reg_107 <= 16'h0;
      x_reg_108 <= 16'h0;
      x_reg_109 <= 16'h0;
      x_reg_110 <= 16'h0;
      x_reg_111 <= 16'h0;
      x_reg_112 <= 16'h0;
      x_reg_113 <= 16'h0;
      x_reg_114 <= 16'h0;
      x_reg_115 <= 16'h0;
      x_reg_116 <= 16'h0;
      x_reg_117 <= 16'h0;
      x_reg_118 <= 16'h0;
      x_reg_119 <= 16'h0;
      x_reg_120 <= 16'h0;
      x_reg_121 <= 16'h0;
      x_reg_122 <= 16'h0;
      x_reg_123 <= 16'h0;
      x_reg_124 <= 16'h0;
      x_reg_125 <= 16'h0;
      x_reg_126 <= 16'h0;
      x_reg_127 <= 16'h0;
      x_reg_128 <= 16'h0;
      x_reg_129 <= 16'h0;
      x_reg_130 <= 16'h0;
      x_reg_131 <= 16'h0;
      x_reg_132 <= 16'h0;
      x_reg_133 <= 16'h0;
      x_reg_134 <= 16'h0;
      x_reg_135 <= 16'h0;
      x_reg_136 <= 16'h0;
      x_reg_137 <= 16'h0;
      x_reg_138 <= 16'h0;
      x_reg_139 <= 16'h0;
      x_reg_140 <= 16'h0;
      x_reg_141 <= 16'h0;
      x_reg_142 <= 16'h0;
      x_reg_143 <= 16'h0;
      x_reg_144 <= 16'h0;
      x_reg_145 <= 16'h0;
      x_reg_146 <= 16'h0;
      x_reg_147 <= 16'h0;
      x_reg_148 <= 16'h0;
      x_reg_149 <= 16'h0;
      x_reg_150 <= 16'h0;
      x_reg_151 <= 16'h0;
      x_reg_152 <= 16'h0;
      x_reg_153 <= 16'h0;
      x_reg_154 <= 16'h0;
      x_reg_155 <= 16'h0;
      x_reg_156 <= 16'h0;
      x_reg_157 <= 16'h0;
      x_reg_158 <= 16'h0;
      x_reg_159 <= 16'h0;
      x_reg_160 <= 16'h0;
      x_reg_161 <= 16'h0;
      x_reg_162 <= 16'h0;
      x_reg_163 <= 16'h0;
      x_reg_164 <= 16'h0;
      x_reg_165 <= 16'h0;
      x_reg_166 <= 16'h0;
      x_reg_167 <= 16'h0;
      x_reg_168 <= 16'h0;
      x_reg_169 <= 16'h0;
      x_reg_170 <= 16'h0;
      x_reg_171 <= 16'h0;
      x_reg_172 <= 16'h0;
      x_reg_173 <= 16'h0;
      x_reg_174 <= 16'h0;
      x_reg_175 <= 16'h0;
      x_reg_176 <= 16'h0;
      x_reg_177 <= 16'h0;
      x_reg_178 <= 16'h0;
      x_reg_179 <= 16'h0;
      x_reg_180 <= 16'h0;
      x_reg_181 <= 16'h0;
      x_reg_182 <= 16'h0;
      x_reg_183 <= 16'h0;
      x_reg_184 <= 16'h0;
      x_reg_185 <= 16'h0;
      x_reg_186 <= 16'h0;
      x_reg_187 <= 16'h0;
      x_reg_188 <= 16'h0;
      x_reg_189 <= 16'h0;
      x_reg_190 <= 16'h0;
      x_reg_191 <= 16'h0;
      x_reg_192 <= 16'h0;
      x_reg_193 <= 16'h0;
      x_reg_194 <= 16'h0;
      x_reg_195 <= 16'h0;
      x_reg_196 <= 16'h0;
      x_reg_197 <= 16'h0;
      x_reg_198 <= 16'h0;
      x_reg_199 <= 16'h0;
      x_reg_200 <= 16'h0;
      x_reg_201 <= 16'h0;
      x_reg_202 <= 16'h0;
      x_reg_203 <= 16'h0;
      x_reg_204 <= 16'h0;
      x_reg_205 <= 16'h0;
      x_reg_206 <= 16'h0;
      x_reg_207 <= 16'h0;
      x_reg_208 <= 16'h0;
      x_reg_209 <= 16'h0;
      x_reg_210 <= 16'h0;
      x_reg_211 <= 16'h0;
      x_reg_212 <= 16'h0;
      x_reg_213 <= 16'h0;
      x_reg_214 <= 16'h0;
      x_reg_215 <= 16'h0;
      x_reg_216 <= 16'h0;
      x_reg_217 <= 16'h0;
      x_reg_218 <= 16'h0;
      x_reg_219 <= 16'h0;
      x_reg_220 <= 16'h0;
      x_reg_221 <= 16'h0;
      x_reg_222 <= 16'h0;
      x_reg_223 <= 16'h0;
      x_reg_224 <= 16'h0;
      x_reg_225 <= 16'h0;
      x_reg_226 <= 16'h0;
      x_reg_227 <= 16'h0;
      x_reg_228 <= 16'h0;
      x_reg_229 <= 16'h0;
      x_reg_230 <= 16'h0;
      x_reg_231 <= 16'h0;
      x_reg_232 <= 16'h0;
      x_reg_233 <= 16'h0;
      x_reg_234 <= 16'h0;
      x_reg_235 <= 16'h0;
      x_reg_236 <= 16'h0;
      x_reg_237 <= 16'h0;
      x_reg_238 <= 16'h0;
      x_reg_239 <= 16'h0;
      x_reg_240 <= 16'h0;
      x_reg_241 <= 16'h0;
      x_reg_242 <= 16'h0;
      x_reg_243 <= 16'h0;
      x_reg_244 <= 16'h0;
      x_reg_245 <= 16'h0;
      x_reg_246 <= 16'h0;
      x_reg_247 <= 16'h0;
      x_reg_248 <= 16'h0;
      x_reg_249 <= 16'h0;
      x_reg_250 <= 16'h0;
      x_reg_251 <= 16'h0;
      x_reg_252 <= 16'h0;
      x_reg_253 <= 16'h0;
      x_reg_254 <= 16'h0;
      x_reg_255 <= 16'h0;
      acc_0 <= 16'h0;
      acc_1 <= 16'h0;
      acc_2 <= 16'h0;
      acc_3 <= 16'h0;
      acc_4 <= 16'h0;
      acc_5 <= 16'h0;
      acc_6 <= 16'h0;
      acc_7 <= 16'h0;
      acc_8 <= 16'h0;
      acc_9 <= 16'h0;
      acc_10 <= 16'h0;
      acc_11 <= 16'h0;
      acc_12 <= 16'h0;
      acc_13 <= 16'h0;
      acc_14 <= 16'h0;
      acc_15 <= 16'h0;
      acc_16 <= 16'h0;
      acc_17 <= 16'h0;
      acc_18 <= 16'h0;
      acc_19 <= 16'h0;
      acc_20 <= 16'h0;
      acc_21 <= 16'h0;
      acc_22 <= 16'h0;
      acc_23 <= 16'h0;
      acc_24 <= 16'h0;
      acc_25 <= 16'h0;
      acc_26 <= 16'h0;
      acc_27 <= 16'h0;
      acc_28 <= 16'h0;
      acc_29 <= 16'h0;
      acc_30 <= 16'h0;
      acc_31 <= 16'h0;
      acc_32 <= 16'h0;
      acc_33 <= 16'h0;
      acc_34 <= 16'h0;
      acc_35 <= 16'h0;
      acc_36 <= 16'h0;
      acc_37 <= 16'h0;
      acc_38 <= 16'h0;
      acc_39 <= 16'h0;
      acc_40 <= 16'h0;
      acc_41 <= 16'h0;
      acc_42 <= 16'h0;
      acc_43 <= 16'h0;
      acc_44 <= 16'h0;
      acc_45 <= 16'h0;
      acc_46 <= 16'h0;
      acc_47 <= 16'h0;
      acc_48 <= 16'h0;
      acc_49 <= 16'h0;
      acc_50 <= 16'h0;
      acc_51 <= 16'h0;
      acc_52 <= 16'h0;
      acc_53 <= 16'h0;
      acc_54 <= 16'h0;
      acc_55 <= 16'h0;
      acc_56 <= 16'h0;
      acc_57 <= 16'h0;
      acc_58 <= 16'h0;
      acc_59 <= 16'h0;
      acc_60 <= 16'h0;
      acc_61 <= 16'h0;
      acc_62 <= 16'h0;
      acc_63 <= 16'h0;
      cnt_w_value <= 6'h0;
      FSM_W_stateReg <= FSM_W_BOOT;
    end else begin
      if(io_reset_acc) begin
        acc_0 <= _zz_acc_0[15 : 0];
        acc_1 <= _zz_acc_0[31 : 16];
        acc_2 <= _zz_acc_0[47 : 32];
        acc_3 <= _zz_acc_0[63 : 48];
        acc_4 <= _zz_acc_0[79 : 64];
        acc_5 <= _zz_acc_0[95 : 80];
        acc_6 <= _zz_acc_0[111 : 96];
        acc_7 <= _zz_acc_0[127 : 112];
        acc_8 <= _zz_acc_0[143 : 128];
        acc_9 <= _zz_acc_0[159 : 144];
        acc_10 <= _zz_acc_0[175 : 160];
        acc_11 <= _zz_acc_0[191 : 176];
        acc_12 <= _zz_acc_0[207 : 192];
        acc_13 <= _zz_acc_0[223 : 208];
        acc_14 <= _zz_acc_0[239 : 224];
        acc_15 <= _zz_acc_0[255 : 240];
        acc_16 <= _zz_acc_0[271 : 256];
        acc_17 <= _zz_acc_0[287 : 272];
        acc_18 <= _zz_acc_0[303 : 288];
        acc_19 <= _zz_acc_0[319 : 304];
        acc_20 <= _zz_acc_0[335 : 320];
        acc_21 <= _zz_acc_0[351 : 336];
        acc_22 <= _zz_acc_0[367 : 352];
        acc_23 <= _zz_acc_0[383 : 368];
        acc_24 <= _zz_acc_0[399 : 384];
        acc_25 <= _zz_acc_0[415 : 400];
        acc_26 <= _zz_acc_0[431 : 416];
        acc_27 <= _zz_acc_0[447 : 432];
        acc_28 <= _zz_acc_0[463 : 448];
        acc_29 <= _zz_acc_0[479 : 464];
        acc_30 <= _zz_acc_0[495 : 480];
        acc_31 <= _zz_acc_0[511 : 496];
        acc_32 <= _zz_acc_0[527 : 512];
        acc_33 <= _zz_acc_0[543 : 528];
        acc_34 <= _zz_acc_0[559 : 544];
        acc_35 <= _zz_acc_0[575 : 560];
        acc_36 <= _zz_acc_0[591 : 576];
        acc_37 <= _zz_acc_0[607 : 592];
        acc_38 <= _zz_acc_0[623 : 608];
        acc_39 <= _zz_acc_0[639 : 624];
        acc_40 <= _zz_acc_0[655 : 640];
        acc_41 <= _zz_acc_0[671 : 656];
        acc_42 <= _zz_acc_0[687 : 672];
        acc_43 <= _zz_acc_0[703 : 688];
        acc_44 <= _zz_acc_0[719 : 704];
        acc_45 <= _zz_acc_0[735 : 720];
        acc_46 <= _zz_acc_0[751 : 736];
        acc_47 <= _zz_acc_0[767 : 752];
        acc_48 <= _zz_acc_0[783 : 768];
        acc_49 <= _zz_acc_0[799 : 784];
        acc_50 <= _zz_acc_0[815 : 800];
        acc_51 <= _zz_acc_0[831 : 816];
        acc_52 <= _zz_acc_0[847 : 832];
        acc_53 <= _zz_acc_0[863 : 848];
        acc_54 <= _zz_acc_0[879 : 864];
        acc_55 <= _zz_acc_0[895 : 880];
        acc_56 <= _zz_acc_0[911 : 896];
        acc_57 <= _zz_acc_0[927 : 912];
        acc_58 <= _zz_acc_0[943 : 928];
        acc_59 <= _zz_acc_0[959 : 944];
        acc_60 <= _zz_acc_0[975 : 960];
        acc_61 <= _zz_acc_0[991 : 976];
        acc_62 <= _zz_acc_0[1007 : 992];
        acc_63 <= _zz_acc_0[1023 : 1008];
      end
      if(when_PE_l36) begin
        x_reg_0 <= io_x[15 : 0];
        x_reg_1 <= io_x[31 : 16];
        x_reg_2 <= io_x[47 : 32];
        x_reg_3 <= io_x[63 : 48];
        x_reg_4 <= io_x[79 : 64];
        x_reg_5 <= io_x[95 : 80];
        x_reg_6 <= io_x[111 : 96];
        x_reg_7 <= io_x[127 : 112];
        x_reg_8 <= io_x[143 : 128];
        x_reg_9 <= io_x[159 : 144];
        x_reg_10 <= io_x[175 : 160];
        x_reg_11 <= io_x[191 : 176];
        x_reg_12 <= io_x[207 : 192];
        x_reg_13 <= io_x[223 : 208];
        x_reg_14 <= io_x[239 : 224];
        x_reg_15 <= io_x[255 : 240];
        x_reg_16 <= io_x[271 : 256];
        x_reg_17 <= io_x[287 : 272];
        x_reg_18 <= io_x[303 : 288];
        x_reg_19 <= io_x[319 : 304];
        x_reg_20 <= io_x[335 : 320];
        x_reg_21 <= io_x[351 : 336];
        x_reg_22 <= io_x[367 : 352];
        x_reg_23 <= io_x[383 : 368];
        x_reg_24 <= io_x[399 : 384];
        x_reg_25 <= io_x[415 : 400];
        x_reg_26 <= io_x[431 : 416];
        x_reg_27 <= io_x[447 : 432];
        x_reg_28 <= io_x[463 : 448];
        x_reg_29 <= io_x[479 : 464];
        x_reg_30 <= io_x[495 : 480];
        x_reg_31 <= io_x[511 : 496];
      end
      if(when_PE_l36_1) begin
        x_reg_32 <= io_x[15 : 0];
        x_reg_33 <= io_x[31 : 16];
        x_reg_34 <= io_x[47 : 32];
        x_reg_35 <= io_x[63 : 48];
        x_reg_36 <= io_x[79 : 64];
        x_reg_37 <= io_x[95 : 80];
        x_reg_38 <= io_x[111 : 96];
        x_reg_39 <= io_x[127 : 112];
        x_reg_40 <= io_x[143 : 128];
        x_reg_41 <= io_x[159 : 144];
        x_reg_42 <= io_x[175 : 160];
        x_reg_43 <= io_x[191 : 176];
        x_reg_44 <= io_x[207 : 192];
        x_reg_45 <= io_x[223 : 208];
        x_reg_46 <= io_x[239 : 224];
        x_reg_47 <= io_x[255 : 240];
        x_reg_48 <= io_x[271 : 256];
        x_reg_49 <= io_x[287 : 272];
        x_reg_50 <= io_x[303 : 288];
        x_reg_51 <= io_x[319 : 304];
        x_reg_52 <= io_x[335 : 320];
        x_reg_53 <= io_x[351 : 336];
        x_reg_54 <= io_x[367 : 352];
        x_reg_55 <= io_x[383 : 368];
        x_reg_56 <= io_x[399 : 384];
        x_reg_57 <= io_x[415 : 400];
        x_reg_58 <= io_x[431 : 416];
        x_reg_59 <= io_x[447 : 432];
        x_reg_60 <= io_x[463 : 448];
        x_reg_61 <= io_x[479 : 464];
        x_reg_62 <= io_x[495 : 480];
        x_reg_63 <= io_x[511 : 496];
      end
      if(when_PE_l36_2) begin
        x_reg_64 <= io_x[15 : 0];
        x_reg_65 <= io_x[31 : 16];
        x_reg_66 <= io_x[47 : 32];
        x_reg_67 <= io_x[63 : 48];
        x_reg_68 <= io_x[79 : 64];
        x_reg_69 <= io_x[95 : 80];
        x_reg_70 <= io_x[111 : 96];
        x_reg_71 <= io_x[127 : 112];
        x_reg_72 <= io_x[143 : 128];
        x_reg_73 <= io_x[159 : 144];
        x_reg_74 <= io_x[175 : 160];
        x_reg_75 <= io_x[191 : 176];
        x_reg_76 <= io_x[207 : 192];
        x_reg_77 <= io_x[223 : 208];
        x_reg_78 <= io_x[239 : 224];
        x_reg_79 <= io_x[255 : 240];
        x_reg_80 <= io_x[271 : 256];
        x_reg_81 <= io_x[287 : 272];
        x_reg_82 <= io_x[303 : 288];
        x_reg_83 <= io_x[319 : 304];
        x_reg_84 <= io_x[335 : 320];
        x_reg_85 <= io_x[351 : 336];
        x_reg_86 <= io_x[367 : 352];
        x_reg_87 <= io_x[383 : 368];
        x_reg_88 <= io_x[399 : 384];
        x_reg_89 <= io_x[415 : 400];
        x_reg_90 <= io_x[431 : 416];
        x_reg_91 <= io_x[447 : 432];
        x_reg_92 <= io_x[463 : 448];
        x_reg_93 <= io_x[479 : 464];
        x_reg_94 <= io_x[495 : 480];
        x_reg_95 <= io_x[511 : 496];
      end
      if(when_PE_l36_3) begin
        x_reg_96 <= io_x[15 : 0];
        x_reg_97 <= io_x[31 : 16];
        x_reg_98 <= io_x[47 : 32];
        x_reg_99 <= io_x[63 : 48];
        x_reg_100 <= io_x[79 : 64];
        x_reg_101 <= io_x[95 : 80];
        x_reg_102 <= io_x[111 : 96];
        x_reg_103 <= io_x[127 : 112];
        x_reg_104 <= io_x[143 : 128];
        x_reg_105 <= io_x[159 : 144];
        x_reg_106 <= io_x[175 : 160];
        x_reg_107 <= io_x[191 : 176];
        x_reg_108 <= io_x[207 : 192];
        x_reg_109 <= io_x[223 : 208];
        x_reg_110 <= io_x[239 : 224];
        x_reg_111 <= io_x[255 : 240];
        x_reg_112 <= io_x[271 : 256];
        x_reg_113 <= io_x[287 : 272];
        x_reg_114 <= io_x[303 : 288];
        x_reg_115 <= io_x[319 : 304];
        x_reg_116 <= io_x[335 : 320];
        x_reg_117 <= io_x[351 : 336];
        x_reg_118 <= io_x[367 : 352];
        x_reg_119 <= io_x[383 : 368];
        x_reg_120 <= io_x[399 : 384];
        x_reg_121 <= io_x[415 : 400];
        x_reg_122 <= io_x[431 : 416];
        x_reg_123 <= io_x[447 : 432];
        x_reg_124 <= io_x[463 : 448];
        x_reg_125 <= io_x[479 : 464];
        x_reg_126 <= io_x[495 : 480];
        x_reg_127 <= io_x[511 : 496];
      end
      if(when_PE_l36_4) begin
        x_reg_128 <= io_x[15 : 0];
        x_reg_129 <= io_x[31 : 16];
        x_reg_130 <= io_x[47 : 32];
        x_reg_131 <= io_x[63 : 48];
        x_reg_132 <= io_x[79 : 64];
        x_reg_133 <= io_x[95 : 80];
        x_reg_134 <= io_x[111 : 96];
        x_reg_135 <= io_x[127 : 112];
        x_reg_136 <= io_x[143 : 128];
        x_reg_137 <= io_x[159 : 144];
        x_reg_138 <= io_x[175 : 160];
        x_reg_139 <= io_x[191 : 176];
        x_reg_140 <= io_x[207 : 192];
        x_reg_141 <= io_x[223 : 208];
        x_reg_142 <= io_x[239 : 224];
        x_reg_143 <= io_x[255 : 240];
        x_reg_144 <= io_x[271 : 256];
        x_reg_145 <= io_x[287 : 272];
        x_reg_146 <= io_x[303 : 288];
        x_reg_147 <= io_x[319 : 304];
        x_reg_148 <= io_x[335 : 320];
        x_reg_149 <= io_x[351 : 336];
        x_reg_150 <= io_x[367 : 352];
        x_reg_151 <= io_x[383 : 368];
        x_reg_152 <= io_x[399 : 384];
        x_reg_153 <= io_x[415 : 400];
        x_reg_154 <= io_x[431 : 416];
        x_reg_155 <= io_x[447 : 432];
        x_reg_156 <= io_x[463 : 448];
        x_reg_157 <= io_x[479 : 464];
        x_reg_158 <= io_x[495 : 480];
        x_reg_159 <= io_x[511 : 496];
      end
      if(when_PE_l36_5) begin
        x_reg_160 <= io_x[15 : 0];
        x_reg_161 <= io_x[31 : 16];
        x_reg_162 <= io_x[47 : 32];
        x_reg_163 <= io_x[63 : 48];
        x_reg_164 <= io_x[79 : 64];
        x_reg_165 <= io_x[95 : 80];
        x_reg_166 <= io_x[111 : 96];
        x_reg_167 <= io_x[127 : 112];
        x_reg_168 <= io_x[143 : 128];
        x_reg_169 <= io_x[159 : 144];
        x_reg_170 <= io_x[175 : 160];
        x_reg_171 <= io_x[191 : 176];
        x_reg_172 <= io_x[207 : 192];
        x_reg_173 <= io_x[223 : 208];
        x_reg_174 <= io_x[239 : 224];
        x_reg_175 <= io_x[255 : 240];
        x_reg_176 <= io_x[271 : 256];
        x_reg_177 <= io_x[287 : 272];
        x_reg_178 <= io_x[303 : 288];
        x_reg_179 <= io_x[319 : 304];
        x_reg_180 <= io_x[335 : 320];
        x_reg_181 <= io_x[351 : 336];
        x_reg_182 <= io_x[367 : 352];
        x_reg_183 <= io_x[383 : 368];
        x_reg_184 <= io_x[399 : 384];
        x_reg_185 <= io_x[415 : 400];
        x_reg_186 <= io_x[431 : 416];
        x_reg_187 <= io_x[447 : 432];
        x_reg_188 <= io_x[463 : 448];
        x_reg_189 <= io_x[479 : 464];
        x_reg_190 <= io_x[495 : 480];
        x_reg_191 <= io_x[511 : 496];
      end
      if(when_PE_l36_6) begin
        x_reg_192 <= io_x[15 : 0];
        x_reg_193 <= io_x[31 : 16];
        x_reg_194 <= io_x[47 : 32];
        x_reg_195 <= io_x[63 : 48];
        x_reg_196 <= io_x[79 : 64];
        x_reg_197 <= io_x[95 : 80];
        x_reg_198 <= io_x[111 : 96];
        x_reg_199 <= io_x[127 : 112];
        x_reg_200 <= io_x[143 : 128];
        x_reg_201 <= io_x[159 : 144];
        x_reg_202 <= io_x[175 : 160];
        x_reg_203 <= io_x[191 : 176];
        x_reg_204 <= io_x[207 : 192];
        x_reg_205 <= io_x[223 : 208];
        x_reg_206 <= io_x[239 : 224];
        x_reg_207 <= io_x[255 : 240];
        x_reg_208 <= io_x[271 : 256];
        x_reg_209 <= io_x[287 : 272];
        x_reg_210 <= io_x[303 : 288];
        x_reg_211 <= io_x[319 : 304];
        x_reg_212 <= io_x[335 : 320];
        x_reg_213 <= io_x[351 : 336];
        x_reg_214 <= io_x[367 : 352];
        x_reg_215 <= io_x[383 : 368];
        x_reg_216 <= io_x[399 : 384];
        x_reg_217 <= io_x[415 : 400];
        x_reg_218 <= io_x[431 : 416];
        x_reg_219 <= io_x[447 : 432];
        x_reg_220 <= io_x[463 : 448];
        x_reg_221 <= io_x[479 : 464];
        x_reg_222 <= io_x[495 : 480];
        x_reg_223 <= io_x[511 : 496];
      end
      if(when_PE_l36_7) begin
        x_reg_224 <= io_x[15 : 0];
        x_reg_225 <= io_x[31 : 16];
        x_reg_226 <= io_x[47 : 32];
        x_reg_227 <= io_x[63 : 48];
        x_reg_228 <= io_x[79 : 64];
        x_reg_229 <= io_x[95 : 80];
        x_reg_230 <= io_x[111 : 96];
        x_reg_231 <= io_x[127 : 112];
        x_reg_232 <= io_x[143 : 128];
        x_reg_233 <= io_x[159 : 144];
        x_reg_234 <= io_x[175 : 160];
        x_reg_235 <= io_x[191 : 176];
        x_reg_236 <= io_x[207 : 192];
        x_reg_237 <= io_x[223 : 208];
        x_reg_238 <= io_x[239 : 224];
        x_reg_239 <= io_x[255 : 240];
        x_reg_240 <= io_x[271 : 256];
        x_reg_241 <= io_x[287 : 272];
        x_reg_242 <= io_x[303 : 288];
        x_reg_243 <= io_x[319 : 304];
        x_reg_244 <= io_x[335 : 320];
        x_reg_245 <= io_x[351 : 336];
        x_reg_246 <= io_x[367 : 352];
        x_reg_247 <= io_x[383 : 368];
        x_reg_248 <= io_x[399 : 384];
        x_reg_249 <= io_x[415 : 400];
        x_reg_250 <= io_x[431 : 416];
        x_reg_251 <= io_x[447 : 432];
        x_reg_252 <= io_x[463 : 448];
        x_reg_253 <= io_x[479 : 464];
        x_reg_254 <= io_x[495 : 480];
        x_reg_255 <= io_x[511 : 496];
      end
      cnt_w_value <= cnt_w_valueNext;
      FSM_W_stateReg <= FSM_W_stateNext;
      case(FSM_W_stateReg)
        FSM_W_WAIT_WEIGHT : begin
        end
        FSM_W_PROCESSING : begin
          if(_zz_1[0]) begin
            acc_0 <= _zz_acc_0_1;
          end
          if(_zz_1[1]) begin
            acc_1 <= _zz_acc_0_1;
          end
          if(_zz_1[2]) begin
            acc_2 <= _zz_acc_0_1;
          end
          if(_zz_1[3]) begin
            acc_3 <= _zz_acc_0_1;
          end
          if(_zz_1[4]) begin
            acc_4 <= _zz_acc_0_1;
          end
          if(_zz_1[5]) begin
            acc_5 <= _zz_acc_0_1;
          end
          if(_zz_1[6]) begin
            acc_6 <= _zz_acc_0_1;
          end
          if(_zz_1[7]) begin
            acc_7 <= _zz_acc_0_1;
          end
          if(_zz_1[8]) begin
            acc_8 <= _zz_acc_0_1;
          end
          if(_zz_1[9]) begin
            acc_9 <= _zz_acc_0_1;
          end
          if(_zz_1[10]) begin
            acc_10 <= _zz_acc_0_1;
          end
          if(_zz_1[11]) begin
            acc_11 <= _zz_acc_0_1;
          end
          if(_zz_1[12]) begin
            acc_12 <= _zz_acc_0_1;
          end
          if(_zz_1[13]) begin
            acc_13 <= _zz_acc_0_1;
          end
          if(_zz_1[14]) begin
            acc_14 <= _zz_acc_0_1;
          end
          if(_zz_1[15]) begin
            acc_15 <= _zz_acc_0_1;
          end
          if(_zz_1[16]) begin
            acc_16 <= _zz_acc_0_1;
          end
          if(_zz_1[17]) begin
            acc_17 <= _zz_acc_0_1;
          end
          if(_zz_1[18]) begin
            acc_18 <= _zz_acc_0_1;
          end
          if(_zz_1[19]) begin
            acc_19 <= _zz_acc_0_1;
          end
          if(_zz_1[20]) begin
            acc_20 <= _zz_acc_0_1;
          end
          if(_zz_1[21]) begin
            acc_21 <= _zz_acc_0_1;
          end
          if(_zz_1[22]) begin
            acc_22 <= _zz_acc_0_1;
          end
          if(_zz_1[23]) begin
            acc_23 <= _zz_acc_0_1;
          end
          if(_zz_1[24]) begin
            acc_24 <= _zz_acc_0_1;
          end
          if(_zz_1[25]) begin
            acc_25 <= _zz_acc_0_1;
          end
          if(_zz_1[26]) begin
            acc_26 <= _zz_acc_0_1;
          end
          if(_zz_1[27]) begin
            acc_27 <= _zz_acc_0_1;
          end
          if(_zz_1[28]) begin
            acc_28 <= _zz_acc_0_1;
          end
          if(_zz_1[29]) begin
            acc_29 <= _zz_acc_0_1;
          end
          if(_zz_1[30]) begin
            acc_30 <= _zz_acc_0_1;
          end
          if(_zz_1[31]) begin
            acc_31 <= _zz_acc_0_1;
          end
          if(_zz_1[32]) begin
            acc_32 <= _zz_acc_0_1;
          end
          if(_zz_1[33]) begin
            acc_33 <= _zz_acc_0_1;
          end
          if(_zz_1[34]) begin
            acc_34 <= _zz_acc_0_1;
          end
          if(_zz_1[35]) begin
            acc_35 <= _zz_acc_0_1;
          end
          if(_zz_1[36]) begin
            acc_36 <= _zz_acc_0_1;
          end
          if(_zz_1[37]) begin
            acc_37 <= _zz_acc_0_1;
          end
          if(_zz_1[38]) begin
            acc_38 <= _zz_acc_0_1;
          end
          if(_zz_1[39]) begin
            acc_39 <= _zz_acc_0_1;
          end
          if(_zz_1[40]) begin
            acc_40 <= _zz_acc_0_1;
          end
          if(_zz_1[41]) begin
            acc_41 <= _zz_acc_0_1;
          end
          if(_zz_1[42]) begin
            acc_42 <= _zz_acc_0_1;
          end
          if(_zz_1[43]) begin
            acc_43 <= _zz_acc_0_1;
          end
          if(_zz_1[44]) begin
            acc_44 <= _zz_acc_0_1;
          end
          if(_zz_1[45]) begin
            acc_45 <= _zz_acc_0_1;
          end
          if(_zz_1[46]) begin
            acc_46 <= _zz_acc_0_1;
          end
          if(_zz_1[47]) begin
            acc_47 <= _zz_acc_0_1;
          end
          if(_zz_1[48]) begin
            acc_48 <= _zz_acc_0_1;
          end
          if(_zz_1[49]) begin
            acc_49 <= _zz_acc_0_1;
          end
          if(_zz_1[50]) begin
            acc_50 <= _zz_acc_0_1;
          end
          if(_zz_1[51]) begin
            acc_51 <= _zz_acc_0_1;
          end
          if(_zz_1[52]) begin
            acc_52 <= _zz_acc_0_1;
          end
          if(_zz_1[53]) begin
            acc_53 <= _zz_acc_0_1;
          end
          if(_zz_1[54]) begin
            acc_54 <= _zz_acc_0_1;
          end
          if(_zz_1[55]) begin
            acc_55 <= _zz_acc_0_1;
          end
          if(_zz_1[56]) begin
            acc_56 <= _zz_acc_0_1;
          end
          if(_zz_1[57]) begin
            acc_57 <= _zz_acc_0_1;
          end
          if(_zz_1[58]) begin
            acc_58 <= _zz_acc_0_1;
          end
          if(_zz_1[59]) begin
            acc_59 <= _zz_acc_0_1;
          end
          if(_zz_1[60]) begin
            acc_60 <= _zz_acc_0_1;
          end
          if(_zz_1[61]) begin
            acc_61 <= _zz_acc_0_1;
          end
          if(_zz_1[62]) begin
            acc_62 <= _zz_acc_0_1;
          end
          if(_zz_1[63]) begin
            acc_63 <= _zz_acc_0_1;
          end
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module DataFSM_1 (
  input  wire          io_start,
  output wire          io_done,
  output reg           io_sq_rd_valid,
  input  wire          io_sq_rd_ready,
  output wire [4:0]    io_sq_rd_payload_opcode,
  output wire [1:0]    io_sq_rd_payload_strm,
  output wire          io_sq_rd_payload_mode,
  output wire          io_sq_rd_payload_rdma,
  output wire          io_sq_rd_payload_remote,
  output wire [3:0]    io_sq_rd_payload_vfid,
  output wire [5:0]    io_sq_rd_payload_pid,
  output wire [3:0]    io_sq_rd_payload_dest,
  output reg           io_sq_rd_payload_last,
  output reg  [47:0]   io_sq_rd_payload_vaddr,
  output reg  [27:0]   io_sq_rd_payload_len,
  output wire          io_sq_rd_payload_actv,
  output wire          io_sq_rd_payload_host,
  output wire [5:0]    io_sq_rd_payload_offs,
  output wire [18:0]   io_sq_rd_payload_rsrvd,
  output reg           io_sq_wr_valid,
  input  wire          io_sq_wr_ready,
  output wire [4:0]    io_sq_wr_payload_opcode,
  output wire [1:0]    io_sq_wr_payload_strm,
  output wire          io_sq_wr_payload_mode,
  output wire          io_sq_wr_payload_rdma,
  output wire          io_sq_wr_payload_remote,
  output wire [3:0]    io_sq_wr_payload_vfid,
  output wire [5:0]    io_sq_wr_payload_pid,
  output wire [3:0]    io_sq_wr_payload_dest,
  output reg           io_sq_wr_payload_last,
  output reg  [47:0]   io_sq_wr_payload_vaddr,
  output reg  [27:0]   io_sq_wr_payload_len,
  output wire          io_sq_wr_payload_actv,
  output wire          io_sq_wr_payload_host,
  output wire [5:0]    io_sq_wr_payload_offs,
  output wire [18:0]   io_sq_wr_payload_rsrvd,
  input  wire          io_cq_rd_valid,
  output reg           io_cq_rd_ready,
  input  wire [4:0]    io_cq_rd_payload_opcode,
  input  wire [1:0]    io_cq_rd_payload_strm,
  input  wire          io_cq_rd_payload_remote,
  input  wire          io_cq_rd_payload_host,
  input  wire [3:0]    io_cq_rd_payload_dest,
  input  wire [5:0]    io_cq_rd_payload_pid,
  input  wire [3:0]    io_cq_rd_payload_vfid,
  input  wire [8:0]    io_cq_rd_payload_rsrvd,
  input  wire          io_cq_wr_valid,
  output reg           io_cq_wr_ready,
  input  wire [4:0]    io_cq_wr_payload_opcode,
  input  wire [1:0]    io_cq_wr_payload_strm,
  input  wire          io_cq_wr_payload_remote,
  input  wire          io_cq_wr_payload_host,
  input  wire [3:0]    io_cq_wr_payload_dest,
  input  wire [5:0]    io_cq_wr_payload_pid,
  input  wire [3:0]    io_cq_wr_payload_vfid,
  input  wire [8:0]    io_cq_wr_payload_rsrvd,
  input  wire [511:0]  io_axis_card_recv_tdata,
  input  wire [63:0]   io_axis_card_recv_tkeep,
  input  wire [5:0]    io_axis_card_recv_tid,
  input  wire          io_axis_card_recv_tlast,
  input  wire          io_axis_card_recv_tvalid,
  output reg           io_axis_card_recv_tready,
  input  wire [15:0]   io_M,
  input  wire [15:0]   io_N,
  input  wire [15:0]   io_K,
  input  wire [63:0]   io_base_addr_X,
  input  wire [63:0]   io_base_addr_W,
  input  wire [63:0]   io_base_addr_Y,
  input  wire [15:0]   io_Non_zero_per_K_slice,
  output reg  [511:0]  io_x,
  output reg           io_w_valid,
  input  wire          io_w_ready,
  output wire [511:0]  io_w_payload,
  output reg  [3:0]    io_select_Y,
  output reg  [7:0]    io_enable_X_0,
  output reg  [7:0]    io_enable_X_1,
  output reg  [7:0]    io_enable_X_2,
  output reg  [7:0]    io_enable_X_3,
  output reg           io_reset_acc,
  input  wire          io_done_acc,
  output wire [3:0]    io_dataFSM_state_Reg, //DEBUG
  input  wire          clk,
  input  wire          resetn
);
  localparam dataFSM_BOOT = 4'd0;
  localparam dataFSM_IDLE = 4'd1;
  localparam dataFSM_NEXT_ROWS = 4'd2;
  localparam dataFSM_LOAD_X_Buffer = 4'd3;
  localparam dataFSM_LOAD_X_DATA = 4'd4;
  localparam dataFSM_LOAD_SLICE = 4'd5;
  localparam dataFSM_READ_W_AR = 4'd6;
  localparam dataFSM_LOAD_W_DATA = 4'd7;
  localparam dataFSM_WAIT_1 = 4'd8;
  localparam dataFSM_MEM_ADDR_Y = 4'd9;
  localparam dataFSM_MEM_WRITE_Y = 4'd10;
  localparam dataFSM_SET_ADDR = 4'd11;
  localparam dataFSM_WAIT_W = 4'd12;

  wire       [511:0]  Buffer_X_spinal_port1;
  wire       [15:0]   _zz_cnt_entries_valueNext;
  wire       [0:0]    _zz_cnt_entries_valueNext_1;
  wire       [31:0]   _zz_cnt_beats_W_valueNext;
  wire       [0:0]    _zz_cnt_beats_W_valueNext_1;
  wire       [1:0]    _zz_cnt_unroll_Y_valueNext;
  wire       [0:0]    _zz_cnt_unroll_Y_valueNext_1;
  wire       [15:0]   _zz_cnt_unroll_rows_valueNext;
  wire       [0:0]    _zz_cnt_unroll_rows_valueNext_1;
  wire       [15:0]   _zz_k_c_valueNext;
  wire       [0:0]    _zz_k_c_valueNext_1;
  wire       [2:0]    _zz_cnt_s_valueNext;
  wire       [0:0]    _zz_cnt_s_valueNext_1;
  wire       [1:0]    _zz_cnt_row_valueNext;
  wire       [0:0]    _zz_cnt_row_valueNext_1;
  wire       [2:0]    _zz_dataFSM_waitCounter_valueNext;
  wire       [0:0]    _zz_dataFSM_waitCounter_valueNext_1;
  wire       [15:0]   _zz_when_DataFSM_l167;
  wire       [63:0]   _zz_io_sq_rd_payload_vaddr;
  wire       [63:0]   _zz_io_sq_rd_payload_vaddr_1;
  wire       [35:0]   _zz_io_sq_rd_payload_vaddr_2;
  wire       [18:0]   _zz_io_sq_rd_payload_vaddr_3;
  wire       [16:0]   _zz_io_sq_rd_payload_vaddr_4;
  wire       [20:0]   _zz_io_sq_rd_payload_len;
  wire       [18:0]   _zz_io_sq_rd_payload_len_1;
  wire       [15:0]   _zz_addr_w;
  wire       [15:0]   _zz_addr_w_1;
  wire       [9:0]    _zz_addr_w_2;
  wire       [15:0]   _zz_when_DataFSM_l215;
  wire       [63:0]   _zz_io_sq_rd_payload_vaddr_5;
  wire       [63:0]   _zz_io_sq_rd_payload_vaddr_6;
  wire       [37:0]   _zz_io_sq_rd_payload_vaddr_7;
  wire       [15:0]   _zz_when_DataFSM_l308;
  wire       [63:0]   _zz_io_sq_wr_payload_vaddr;
  wire       [63:0]   _zz_io_sq_wr_payload_vaddr_1;
  wire       [35:0]   _zz_io_sq_wr_payload_vaddr_2;
  wire       [35:0]   _zz_io_sq_wr_payload_vaddr_3;
  wire       [18:0]   _zz_io_sq_wr_payload_vaddr_4;
  wire       [18:0]   _zz_io_sq_wr_payload_vaddr_5;
  wire       [18:0]   _zz_io_sq_wr_payload_vaddr_6;
  wire       [16:0]   _zz_io_sq_wr_payload_vaddr_7;
  wire       [35:0]   _zz_io_sq_wr_payload_vaddr_8;
  wire       [16:0]   _zz_io_sq_wr_payload_vaddr_9;
  wire       [19:0]   _zz_addr_r;
  wire       [19:0]   _zz_addr_r_1;
  wire       [19:0]   _zz_addr_r_2;
  wire       [9:0]    _zz_addr_r_3;
  wire       [19:0]   _zz_addr_r_4;
  wire       [19:0]   _zz_addr_r_5;
  reg                 done;
  reg                 enable_write;
  reg        [8:0]    addr_w;
  reg        [8:0]    addr_r;
  wire       [511:0]  buffer_out;
  reg        [15:0]   cnt_N;
  reg        [15:0]   cnt_M;
  reg        [15:0]   cnt_K;
  reg                 cnt_entries_willIncrement;
  reg                 cnt_entries_willClear;
  reg        [15:0]   cnt_entries_valueNext;
  reg        [15:0]   cnt_entries_value;
  wire                cnt_entries_willOverflowIfInc;
  wire                cnt_entries_willOverflow;
  reg                 cnt_beats_W_willIncrement;
  reg                 cnt_beats_W_willClear;
  reg        [31:0]   cnt_beats_W_valueNext;
  reg        [31:0]   cnt_beats_W_value;
  wire                cnt_beats_W_willOverflowIfInc;
  wire                cnt_beats_W_willOverflow;
  reg                 cnt_unroll_Y_willIncrement;
  reg                 cnt_unroll_Y_willClear;
  reg        [1:0]    cnt_unroll_Y_valueNext;
  reg        [1:0]    cnt_unroll_Y_value;
  wire                cnt_unroll_Y_willOverflowIfInc;
  wire                cnt_unroll_Y_willOverflow;
  reg                 cnt_unroll_rows_willIncrement;
  reg                 cnt_unroll_rows_willClear;
  reg        [15:0]   cnt_unroll_rows_valueNext;
  reg        [15:0]   cnt_unroll_rows_value;
  wire                cnt_unroll_rows_willOverflowIfInc;
  wire                cnt_unroll_rows_willOverflow;
  reg                 k_c_willIncrement;
  reg                 k_c_willClear;
  reg        [15:0]   k_c_valueNext;
  reg        [15:0]   k_c_value;
  wire                k_c_willOverflowIfInc;
  wire                k_c_willOverflow;
  reg                 cnt_s_willIncrement;
  reg                 cnt_s_willClear;
  reg        [2:0]    cnt_s_valueNext;
  reg        [2:0]    cnt_s_value;
  wire                cnt_s_willOverflowIfInc;
  wire                cnt_s_willOverflow;
  reg                 cnt_row_willIncrement;
  reg                 cnt_row_willClear;
  reg        [1:0]    cnt_row_valueNext;
  reg        [1:0]    cnt_row_value;
  wire                cnt_row_willOverflowIfInc;
  wire                cnt_row_willOverflow;
  reg        [15:0]   cnt_N_write;
  wire                dataFSM_wantExit;
  reg                 dataFSM_wantStart;
  wire                dataFSM_wantKill;
  reg                 dataFSM_waitCounter_willIncrement;
  reg                 dataFSM_waitCounter_willClear;
  reg        [2:0]    dataFSM_waitCounter_valueNext;
  reg        [2:0]    dataFSM_waitCounter_value;
  wire                dataFSM_waitCounter_willOverflowIfInc;
  wire                dataFSM_waitCounter_willOverflow;
  reg        [3:0]    dataFSM_stateReg;
  reg        [3:0]    dataFSM_stateNext;
  wire                when_DataFSM_l123;
  wire                when_DataFSM_l150;
  wire                when_DataFSM_l167;
  wire                io_sq_rd_fire;
  wire                when_DataFSM_l206;
  wire                when_DataFSM_l215;
  wire       [3:0]    _zz_3;
  wire       [3:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [3:0]    _zz_6;
  wire       [3:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [3:0]    _zz_9;
  wire       [3:0]    _zz_10;
  wire                when_DataFSM_l261;
  wire                when_DataFSM_l266;
  wire                when_DataFSM_l299;
  wire                when_DataFSM_l308;
  wire                when_DataFSM_l314;
  wire                when_DataFSM_l334;
  wire                io_sq_wr_fire;
  wire                io_cq_wr_fire;
  wire                when_DataFSM_l374;
  wire                when_DataFSM_l380;
  wire                dataFSM_onExit_BOOT;
  wire                dataFSM_onExit_IDLE;
  wire                dataFSM_onExit_NEXT_ROWS;
  wire                dataFSM_onExit_LOAD_X_Buffer;
  wire                dataFSM_onExit_LOAD_X_DATA;
  wire                dataFSM_onExit_LOAD_SLICE;
  wire                dataFSM_onExit_READ_W_AR;
  wire                dataFSM_onExit_LOAD_W_DATA;
  wire                dataFSM_onExit_WAIT_1;
  wire                dataFSM_onExit_MEM_ADDR_Y;
  wire                dataFSM_onExit_MEM_WRITE_Y;
  wire                dataFSM_onExit_SET_ADDR;
  wire                dataFSM_onExit_WAIT_W;
  wire                dataFSM_onEntry_BOOT;
  wire                dataFSM_onEntry_IDLE;
  wire                dataFSM_onEntry_NEXT_ROWS;
  wire                dataFSM_onEntry_LOAD_X_Buffer;
  wire                dataFSM_onEntry_LOAD_X_DATA;
  wire                dataFSM_onEntry_LOAD_SLICE;
  wire                dataFSM_onEntry_READ_W_AR;
  wire                dataFSM_onEntry_LOAD_W_DATA;
  wire                dataFSM_onEntry_WAIT_1;
  wire                dataFSM_onEntry_MEM_ADDR_Y;
  wire                dataFSM_onEntry_MEM_WRITE_Y;
  wire                dataFSM_onEntry_SET_ADDR;
  wire                dataFSM_onEntry_WAIT_W;
  `ifndef SYNTHESIS
  reg [103:0] dataFSM_stateReg_string;
  reg [103:0] dataFSM_stateNext_string;
  `endif

  (* ram_style = "distributed" *) reg [511:0] Buffer_X [0:511];
  assign io_dataFSM_state_reg = dataFSM_stateReg;      // DEBUG
  assign _zz_cnt_entries_valueNext_1 = cnt_entries_willIncrement;
  assign _zz_cnt_entries_valueNext = {15'd0, _zz_cnt_entries_valueNext_1};
  assign _zz_cnt_beats_W_valueNext_1 = cnt_beats_W_willIncrement;
  assign _zz_cnt_beats_W_valueNext = {31'd0, _zz_cnt_beats_W_valueNext_1};
  assign _zz_cnt_unroll_Y_valueNext_1 = cnt_unroll_Y_willIncrement;
  assign _zz_cnt_unroll_Y_valueNext = {1'd0, _zz_cnt_unroll_Y_valueNext_1};
  assign _zz_cnt_unroll_rows_valueNext_1 = cnt_unroll_rows_willIncrement;
  assign _zz_cnt_unroll_rows_valueNext = {15'd0, _zz_cnt_unroll_rows_valueNext_1};
  assign _zz_k_c_valueNext_1 = k_c_willIncrement;
  assign _zz_k_c_valueNext = {15'd0, _zz_k_c_valueNext_1};
  assign _zz_cnt_s_valueNext_1 = cnt_s_willIncrement;
  assign _zz_cnt_s_valueNext = {2'd0, _zz_cnt_s_valueNext_1};
  assign _zz_cnt_row_valueNext_1 = cnt_row_willIncrement;
  assign _zz_cnt_row_valueNext = {1'd0, _zz_cnt_row_valueNext_1};
  assign _zz_dataFSM_waitCounter_valueNext_1 = dataFSM_waitCounter_willIncrement;
  assign _zz_dataFSM_waitCounter_valueNext = {2'd0, _zz_dataFSM_waitCounter_valueNext_1};
  assign _zz_when_DataFSM_l167 = (cnt_M + 16'h0004);
  assign _zz_io_sq_rd_payload_vaddr = (io_base_addr_X + _zz_io_sq_rd_payload_vaddr_1);
  assign _zz_io_sq_rd_payload_vaddr_2 = (_zz_io_sq_rd_payload_vaddr_3 * _zz_io_sq_rd_payload_vaddr_4);
  assign _zz_io_sq_rd_payload_vaddr_1 = {28'd0, _zz_io_sq_rd_payload_vaddr_2};
  assign _zz_io_sq_rd_payload_vaddr_3 = (cnt_unroll_rows_value * 3'b100);
  assign _zz_io_sq_rd_payload_vaddr_4 = ({1'd0,io_K} <<< 1'd1);
  assign _zz_io_sq_rd_payload_len = (_zz_io_sq_rd_payload_len_1 * 2'b10);
  assign _zz_io_sq_rd_payload_len_1 = (3'b100 * io_K);
  assign _zz_addr_w = (_zz_addr_w_1 + k_c_value);
  assign _zz_addr_w_2 = (cnt_row_value * 8'h80);
  assign _zz_addr_w_1 = {6'd0, _zz_addr_w_2};
  assign _zz_when_DataFSM_l215 = (io_K - 16'h0020);
  assign _zz_io_sq_rd_payload_vaddr_5 = (io_base_addr_W + _zz_io_sq_rd_payload_vaddr_6);
  assign _zz_io_sq_rd_payload_vaddr_7 = ({6'd0,cnt_beats_W_value} <<< 3'd6);
  assign _zz_io_sq_rd_payload_vaddr_6 = {26'd0, _zz_io_sq_rd_payload_vaddr_7};
  assign _zz_when_DataFSM_l308 = (io_Non_zero_per_K_slice - 16'h0001);
  assign _zz_io_sq_wr_payload_vaddr = (io_base_addr_Y + _zz_io_sq_wr_payload_vaddr_1);
  assign _zz_io_sq_wr_payload_vaddr_2 = (_zz_io_sq_wr_payload_vaddr_3 + _zz_io_sq_wr_payload_vaddr_8);
  assign _zz_io_sq_wr_payload_vaddr_1 = {28'd0, _zz_io_sq_wr_payload_vaddr_2};
  assign _zz_io_sq_wr_payload_vaddr_3 = (_zz_io_sq_wr_payload_vaddr_4 * _zz_io_sq_wr_payload_vaddr_7);
  assign _zz_io_sq_wr_payload_vaddr_4 = (_zz_io_sq_wr_payload_vaddr_5 + _zz_io_sq_wr_payload_vaddr_6);
  assign _zz_io_sq_wr_payload_vaddr_5 = (cnt_unroll_rows_value * 3'b100);
  assign _zz_io_sq_wr_payload_vaddr_6 = {17'd0, cnt_unroll_Y_value};
  assign _zz_io_sq_wr_payload_vaddr_7 = ({1'd0,io_N} <<< 1'd1);
  assign _zz_io_sq_wr_payload_vaddr_9 = ({1'd0,cnt_N_write} <<< 1'd1);
  assign _zz_io_sq_wr_payload_vaddr_8 = {19'd0, _zz_io_sq_wr_payload_vaddr_9};
  assign _zz_addr_r = (_zz_addr_r_1 + _zz_addr_r_5);
  assign _zz_addr_r_1 = (_zz_addr_r_2 + _zz_addr_r_4);
  assign _zz_addr_r_3 = (cnt_row_value * 8'h80);
  assign _zz_addr_r_2 = {10'd0, _zz_addr_r_3};
  assign _zz_addr_r_4 = (k_c_value * 4'b1000);
  assign _zz_addr_r_5 = {17'd0, cnt_s_value};
  initial begin
    $readmemb("ternaryGEMMOP.v_toplevel_TopLevel_FSM_Buffer_X.bin",Buffer_X);
  end
  always @(posedge clk) begin
    if(enable_write) begin
      Buffer_X[addr_w] <= io_axis_card_recv_tdata;
    end
  end

  assign Buffer_X_spinal_port1 = Buffer_X[addr_r];
  `ifndef SYNTHESIS
  always @(*) begin
    case(dataFSM_stateReg)
      dataFSM_BOOT : dataFSM_stateReg_string = "BOOT         ";
      dataFSM_IDLE : dataFSM_stateReg_string = "IDLE         ";
      dataFSM_NEXT_ROWS : dataFSM_stateReg_string = "NEXT_ROWS    ";
      dataFSM_LOAD_X_Buffer : dataFSM_stateReg_string = "LOAD_X_Buffer";
      dataFSM_LOAD_X_DATA : dataFSM_stateReg_string = "LOAD_X_DATA  ";
      dataFSM_LOAD_SLICE : dataFSM_stateReg_string = "LOAD_SLICE   ";
      dataFSM_READ_W_AR : dataFSM_stateReg_string = "READ_W_AR    ";
      dataFSM_LOAD_W_DATA : dataFSM_stateReg_string = "LOAD_W_DATA  ";
      dataFSM_WAIT_1 : dataFSM_stateReg_string = "WAIT_1       ";
      dataFSM_MEM_ADDR_Y : dataFSM_stateReg_string = "MEM_ADDR_Y   ";
      dataFSM_MEM_WRITE_Y : dataFSM_stateReg_string = "MEM_WRITE_Y  ";
      dataFSM_SET_ADDR : dataFSM_stateReg_string = "SET_ADDR     ";
      dataFSM_WAIT_W : dataFSM_stateReg_string = "WAIT_W       ";
      default : dataFSM_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(dataFSM_stateNext)
      dataFSM_BOOT : dataFSM_stateNext_string = "BOOT         ";
      dataFSM_IDLE : dataFSM_stateNext_string = "IDLE         ";
      dataFSM_NEXT_ROWS : dataFSM_stateNext_string = "NEXT_ROWS    ";
      dataFSM_LOAD_X_Buffer : dataFSM_stateNext_string = "LOAD_X_Buffer";
      dataFSM_LOAD_X_DATA : dataFSM_stateNext_string = "LOAD_X_DATA  ";
      dataFSM_LOAD_SLICE : dataFSM_stateNext_string = "LOAD_SLICE   ";
      dataFSM_READ_W_AR : dataFSM_stateNext_string = "READ_W_AR    ";
      dataFSM_LOAD_W_DATA : dataFSM_stateNext_string = "LOAD_W_DATA  ";
      dataFSM_WAIT_1 : dataFSM_stateNext_string = "WAIT_1       ";
      dataFSM_MEM_ADDR_Y : dataFSM_stateNext_string = "MEM_ADDR_Y   ";
      dataFSM_MEM_WRITE_Y : dataFSM_stateNext_string = "MEM_WRITE_Y  ";
      dataFSM_SET_ADDR : dataFSM_stateNext_string = "SET_ADDR     ";
      dataFSM_WAIT_W : dataFSM_stateNext_string = "WAIT_W       ";
      default : dataFSM_stateNext_string = "?????????????";
    endcase
  end
  `endif

  assign io_done = done;
  always @(*) begin
    enable_write = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        enable_write = 1'b0;
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(when_DataFSM_l206) begin
          enable_write = 1'b1;
        end
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign buffer_out = Buffer_X_spinal_port1;
  always @(*) begin
    cnt_entries_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(io_done_acc) begin
          if(when_DataFSM_l308) begin
            cnt_entries_willIncrement = 1'b1;
          end
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_entries_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_entries_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(io_done_acc) begin
          if(!when_DataFSM_l308) begin
            cnt_entries_willClear = 1'b1;
          end
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_entries_willOverflowIfInc = (cnt_entries_value == 16'hffff);
  assign cnt_entries_willOverflow = (cnt_entries_willOverflowIfInc && cnt_entries_willIncrement);
  always @(*) begin
    cnt_entries_valueNext = (cnt_entries_value + _zz_cnt_entries_valueNext);
    if(cnt_entries_willClear) begin
      cnt_entries_valueNext = 16'h0;
    end
  end

  always @(*) begin
    cnt_beats_W_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(when_DataFSM_l299) begin
          cnt_beats_W_willIncrement = 1'b1;
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_beats_W_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_beats_W_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
        cnt_beats_W_willClear = 1'b1;
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_beats_W_willOverflowIfInc = (cnt_beats_W_value == 32'hffffffff);
  assign cnt_beats_W_willOverflow = (cnt_beats_W_willOverflowIfInc && cnt_beats_W_willIncrement);
  always @(*) begin
    cnt_beats_W_valueNext = (cnt_beats_W_value + _zz_cnt_beats_W_valueNext);
    if(cnt_beats_W_willClear) begin
      cnt_beats_W_valueNext = 32'h0;
    end
  end

  always @(*) begin
    cnt_unroll_Y_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(!when_DataFSM_l374) begin
            cnt_unroll_Y_willIncrement = 1'b1;
          end
        end
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_unroll_Y_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_unroll_Y_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(when_DataFSM_l374) begin
            cnt_unroll_Y_willClear = 1'b1;
          end
        end
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_unroll_Y_willOverflowIfInc = (cnt_unroll_Y_value == 2'b11);
  assign cnt_unroll_Y_willOverflow = (cnt_unroll_Y_willOverflowIfInc && cnt_unroll_Y_willIncrement);
  always @(*) begin
    cnt_unroll_Y_valueNext = (cnt_unroll_Y_value + _zz_cnt_unroll_Y_valueNext);
    if(cnt_unroll_Y_willClear) begin
      cnt_unroll_Y_valueNext = 2'b00;
    end
  end

  always @(*) begin
    cnt_unroll_rows_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
        cnt_unroll_rows_willIncrement = 1'b1;
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_unroll_rows_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_unroll_rows_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_unroll_rows_willOverflowIfInc = (cnt_unroll_rows_value == 16'hffff);
  assign cnt_unroll_rows_willOverflow = (cnt_unroll_rows_willOverflowIfInc && cnt_unroll_rows_willIncrement);
  always @(*) begin
    cnt_unroll_rows_valueNext = (cnt_unroll_rows_value + _zz_cnt_unroll_rows_valueNext);
    if(cnt_unroll_rows_willClear) begin
      cnt_unroll_rows_valueNext = 16'h0;
    end
  end

  always @(*) begin
    k_c_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(when_DataFSM_l206) begin
          k_c_willIncrement = 1'b1;
        end
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(io_done_acc) begin
          if(!when_DataFSM_l308) begin
            if(when_DataFSM_l314) begin
              k_c_willIncrement = 1'b1;
            end
          end
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    k_c_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        k_c_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
        k_c_willClear = 1'b1;
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(when_DataFSM_l206) begin
          if(when_DataFSM_l215) begin
            k_c_willClear = 1'b1;
          end
        end
        if(io_axis_card_recv_tlast) begin
          k_c_willClear = 1'b1;
        end
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(when_DataFSM_l374) begin
            k_c_willClear = 1'b1;
          end
        end
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign k_c_willOverflowIfInc = (k_c_value == 16'hffff);
  assign k_c_willOverflow = (k_c_willOverflowIfInc && k_c_willIncrement);
  always @(*) begin
    k_c_valueNext = (k_c_value + _zz_k_c_valueNext);
    if(k_c_willClear) begin
      k_c_valueNext = 16'h0;
    end
  end

  always @(*) begin
    cnt_s_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        if(!when_DataFSM_l261) begin
          if(!when_DataFSM_l266) begin
            cnt_s_willIncrement = 1'b1;
          end
        end
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_s_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_s_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
        cnt_s_willClear = 1'b1;
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(io_axis_card_recv_tlast) begin
          cnt_s_willClear = 1'b1;
        end
      end
      dataFSM_LOAD_SLICE : begin
        if(when_DataFSM_l261) begin
          cnt_s_willClear = 1'b1;
        end else begin
          if(when_DataFSM_l266) begin
            cnt_s_willClear = 1'b1;
          end
        end
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_s_willOverflowIfInc = (cnt_s_value == 3'b111);
  assign cnt_s_willOverflow = (cnt_s_willOverflowIfInc && cnt_s_willIncrement);
  always @(*) begin
    cnt_s_valueNext = (cnt_s_value + _zz_cnt_s_valueNext);
    if(cnt_s_willClear) begin
      cnt_s_valueNext = 3'b000;
    end
  end

  always @(*) begin
    cnt_row_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(when_DataFSM_l206) begin
          if(when_DataFSM_l215) begin
            cnt_row_willIncrement = 1'b1;
          end
        end
      end
      dataFSM_LOAD_SLICE : begin
        if(!when_DataFSM_l261) begin
          if(when_DataFSM_l266) begin
            cnt_row_willIncrement = 1'b1;
          end
        end
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cnt_row_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        cnt_row_willClear = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
        cnt_row_willClear = 1'b1;
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        if(io_axis_card_recv_tlast) begin
          cnt_row_willClear = 1'b1;
        end
      end
      dataFSM_LOAD_SLICE : begin
        if(when_DataFSM_l261) begin
          cnt_row_willClear = 1'b1;
        end
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign cnt_row_willOverflowIfInc = (cnt_row_value == 2'b11);
  assign cnt_row_willOverflow = (cnt_row_willOverflowIfInc && cnt_row_willIncrement);
  always @(*) begin
    cnt_row_valueNext = (cnt_row_value + _zz_cnt_row_valueNext);
    if(cnt_row_willClear) begin
      cnt_row_valueNext = 2'b00;
    end
  end

  always @(*) begin
    io_sq_rd_valid = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
        io_sq_rd_valid = 1'b1;
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
        io_sq_rd_valid = 1'b1;
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign io_sq_rd_payload_opcode = 5'h0;
  assign io_sq_rd_payload_strm = 2'b00;
  assign io_sq_rd_payload_mode = 1'b0;
  assign io_sq_rd_payload_rdma = 1'b0;
  assign io_sq_rd_payload_remote = 1'b0;
  assign io_sq_rd_payload_vfid = 4'b0000;
  assign io_sq_rd_payload_pid = 6'h0;
  assign io_sq_rd_payload_dest = 4'b0000;
  always @(*) begin
    io_sq_rd_payload_last = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
        io_sq_rd_payload_last = 1'b1;
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
        io_sq_rd_payload_last = 1'b1;
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_sq_rd_payload_vaddr = 48'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
        io_sq_rd_payload_vaddr = _zz_io_sq_rd_payload_vaddr[47:0];
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
        io_sq_rd_payload_vaddr = _zz_io_sq_rd_payload_vaddr_5[47:0];
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_sq_rd_payload_len = 28'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
        io_sq_rd_payload_len = {7'd0, _zz_io_sq_rd_payload_len};
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
        io_sq_rd_payload_len = 28'h0000040;
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign io_sq_rd_payload_actv = 1'b0;
  assign io_sq_rd_payload_host = 1'b0;
  assign io_sq_rd_payload_offs = 6'h0;
  assign io_sq_rd_payload_rsrvd = 19'h0;
  always @(*) begin
    io_sq_wr_valid = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
        io_sq_wr_valid = 1'b1;
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign io_sq_wr_payload_opcode = 5'h0;
  assign io_sq_wr_payload_strm = 2'b00;
  assign io_sq_wr_payload_mode = 1'b0;
  assign io_sq_wr_payload_rdma = 1'b0;
  assign io_sq_wr_payload_remote = 1'b0;
  assign io_sq_wr_payload_vfid = 4'b0000;
  assign io_sq_wr_payload_pid = 6'h0;
  assign io_sq_wr_payload_dest = 4'b0000;
  always @(*) begin
    io_sq_wr_payload_last = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
        io_sq_wr_payload_last = 1'b1;
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_sq_wr_payload_vaddr = 48'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
        io_sq_wr_payload_vaddr = _zz_io_sq_wr_payload_vaddr[47:0];
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_sq_wr_payload_len = 28'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
        io_sq_wr_payload_len = 28'h0000040;
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign io_sq_wr_payload_actv = 1'b0;
  assign io_sq_wr_payload_host = 1'b0;
  assign io_sq_wr_payload_offs = 6'h0;
  assign io_sq_wr_payload_rsrvd = 19'h0;
  always @(*) begin
    io_cq_rd_ready = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        io_cq_rd_ready = 1'b1;
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        io_cq_rd_ready = 1'b1;
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_cq_wr_ready = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        io_cq_wr_ready = 1'b1;
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_axis_card_recv_tready = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        io_axis_card_recv_tready = 1'b1;
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        io_axis_card_recv_tready = io_w_ready;
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_w_valid = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(when_DataFSM_l299) begin
          io_w_valid = 1'b1;
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign io_w_payload = io_axis_card_recv_tdata;
  always @(*) begin
    io_x = 512'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        io_x = buffer_out;
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_select_Y = 4'b0000;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        case(cnt_unroll_Y_value)
          2'b00 : begin
            io_select_Y = 4'b0001;
          end
          2'b01 : begin
            io_select_Y = 4'b0010;
          end
          2'b10 : begin
            io_select_Y = 4'b0100;
          end
          default : begin
            io_select_Y = 4'b1000;
          end
        endcase
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_enable_X_0 = 8'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        case(cnt_s_value)
          3'b000 : begin
            if(_zz_3[0]) begin
              io_enable_X_0 = 8'h01;
            end
          end
          3'b001 : begin
            if(_zz_4[0]) begin
              io_enable_X_0 = 8'h02;
            end
          end
          3'b010 : begin
            if(_zz_5[0]) begin
              io_enable_X_0 = 8'h04;
            end
          end
          3'b011 : begin
            if(_zz_6[0]) begin
              io_enable_X_0 = 8'h08;
            end
          end
          3'b100 : begin
            if(_zz_7[0]) begin
              io_enable_X_0 = 8'h10;
            end
          end
          3'b101 : begin
            if(_zz_8[0]) begin
              io_enable_X_0 = 8'h20;
            end
          end
          3'b110 : begin
            if(_zz_9[0]) begin
              io_enable_X_0 = 8'h40;
            end
          end
          default : begin
            if(_zz_10[0]) begin
              io_enable_X_0 = 8'h80;
            end
          end
        endcase
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_enable_X_1 = 8'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        case(cnt_s_value)
          3'b000 : begin
            if(_zz_3[1]) begin
              io_enable_X_1 = 8'h01;
            end
          end
          3'b001 : begin
            if(_zz_4[1]) begin
              io_enable_X_1 = 8'h02;
            end
          end
          3'b010 : begin
            if(_zz_5[1]) begin
              io_enable_X_1 = 8'h04;
            end
          end
          3'b011 : begin
            if(_zz_6[1]) begin
              io_enable_X_1 = 8'h08;
            end
          end
          3'b100 : begin
            if(_zz_7[1]) begin
              io_enable_X_1 = 8'h10;
            end
          end
          3'b101 : begin
            if(_zz_8[1]) begin
              io_enable_X_1 = 8'h20;
            end
          end
          3'b110 : begin
            if(_zz_9[1]) begin
              io_enable_X_1 = 8'h40;
            end
          end
          default : begin
            if(_zz_10[1]) begin
              io_enable_X_1 = 8'h80;
            end
          end
        endcase
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_enable_X_2 = 8'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        case(cnt_s_value)
          3'b000 : begin
            if(_zz_3[2]) begin
              io_enable_X_2 = 8'h01;
            end
          end
          3'b001 : begin
            if(_zz_4[2]) begin
              io_enable_X_2 = 8'h02;
            end
          end
          3'b010 : begin
            if(_zz_5[2]) begin
              io_enable_X_2 = 8'h04;
            end
          end
          3'b011 : begin
            if(_zz_6[2]) begin
              io_enable_X_2 = 8'h08;
            end
          end
          3'b100 : begin
            if(_zz_7[2]) begin
              io_enable_X_2 = 8'h10;
            end
          end
          3'b101 : begin
            if(_zz_8[2]) begin
              io_enable_X_2 = 8'h20;
            end
          end
          3'b110 : begin
            if(_zz_9[2]) begin
              io_enable_X_2 = 8'h40;
            end
          end
          default : begin
            if(_zz_10[2]) begin
              io_enable_X_2 = 8'h80;
            end
          end
        endcase
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_enable_X_3 = 8'h0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
        case(cnt_s_value)
          3'b000 : begin
            if(_zz_3[3]) begin
              io_enable_X_3 = 8'h01;
            end
          end
          3'b001 : begin
            if(_zz_4[3]) begin
              io_enable_X_3 = 8'h02;
            end
          end
          3'b010 : begin
            if(_zz_5[3]) begin
              io_enable_X_3 = 8'h04;
            end
          end
          3'b011 : begin
            if(_zz_6[3]) begin
              io_enable_X_3 = 8'h08;
            end
          end
          3'b100 : begin
            if(_zz_7[3]) begin
              io_enable_X_3 = 8'h10;
            end
          end
          3'b101 : begin
            if(_zz_8[3]) begin
              io_enable_X_3 = 8'h20;
            end
          end
          3'b110 : begin
            if(_zz_9[3]) begin
              io_enable_X_3 = 8'h40;
            end
          end
          default : begin
            if(_zz_10[3]) begin
              io_enable_X_3 = 8'h80;
            end
          end
        endcase
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    io_reset_acc = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        io_reset_acc = 1'b1;
      end
      dataFSM_NEXT_ROWS : begin
        if(!when_DataFSM_l167) begin
          io_reset_acc = 1'b1;
        end
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(when_DataFSM_l374) begin
            if(when_DataFSM_l380) begin
              io_reset_acc = 1'b1;
            end
          end
        end
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign dataFSM_wantExit = 1'b0;
  always @(*) begin
    dataFSM_wantStart = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
        dataFSM_wantStart = 1'b1;
      end
    endcase
  end

  assign dataFSM_wantKill = 1'b0;
  always @(*) begin
    dataFSM_waitCounter_willIncrement = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
        if(!when_DataFSM_l334) begin
          dataFSM_waitCounter_willIncrement = 1'b1;
        end
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    dataFSM_waitCounter_willClear = 1'b0;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
      end
      dataFSM_NEXT_ROWS : begin
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
      end
      dataFSM_LOAD_SLICE : begin
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
      end
      dataFSM_WAIT_1 : begin
        if(when_DataFSM_l334) begin
          dataFSM_waitCounter_willClear = 1'b1;
        end
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
      end
      dataFSM_SET_ADDR : begin
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end

  assign dataFSM_waitCounter_willOverflowIfInc = (dataFSM_waitCounter_value == 3'b111);
  assign dataFSM_waitCounter_willOverflow = (dataFSM_waitCounter_willOverflowIfInc && dataFSM_waitCounter_willIncrement);
  always @(*) begin
    dataFSM_waitCounter_valueNext = (dataFSM_waitCounter_value + _zz_dataFSM_waitCounter_valueNext);
    if(dataFSM_waitCounter_willClear) begin
      dataFSM_waitCounter_valueNext = 3'b000;
    end
  end

  always @(*) begin
    dataFSM_stateNext = dataFSM_stateReg;
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        if(when_DataFSM_l150) begin
          dataFSM_stateNext = dataFSM_LOAD_X_Buffer;
        end
      end
      dataFSM_NEXT_ROWS : begin
        if(when_DataFSM_l167) begin
          dataFSM_stateNext = dataFSM_IDLE;
        end else begin
          dataFSM_stateNext = dataFSM_LOAD_X_Buffer;
        end
      end
      dataFSM_LOAD_X_Buffer : begin
        if(io_sq_rd_fire) begin
          dataFSM_stateNext = dataFSM_LOAD_X_DATA;
        end
      end
      dataFSM_LOAD_X_DATA : begin
        if(io_axis_card_recv_tlast) begin
          dataFSM_stateNext = dataFSM_SET_ADDR;
        end
      end
      dataFSM_LOAD_SLICE : begin
        if(when_DataFSM_l261) begin
          dataFSM_stateNext = dataFSM_READ_W_AR;
        end else begin
          if(when_DataFSM_l266) begin
            dataFSM_stateNext = dataFSM_SET_ADDR;
          end else begin
            dataFSM_stateNext = dataFSM_SET_ADDR;
          end
        end
      end
      dataFSM_READ_W_AR : begin
        if(io_sq_rd_fire) begin
          dataFSM_stateNext = dataFSM_LOAD_W_DATA;
        end
      end
      dataFSM_LOAD_W_DATA : begin
        if(io_done_acc) begin
          if(when_DataFSM_l308) begin
            dataFSM_stateNext = dataFSM_READ_W_AR;
          end else begin
            if(when_DataFSM_l314) begin
              dataFSM_stateNext = dataFSM_SET_ADDR;
            end else begin
              dataFSM_stateNext = dataFSM_WAIT_1;
            end
          end
        end
      end
      dataFSM_WAIT_1 : begin
        if(when_DataFSM_l334) begin
          dataFSM_stateNext = dataFSM_MEM_ADDR_Y;
        end
      end
      dataFSM_MEM_ADDR_Y : begin
        if(io_sq_wr_fire) begin
          dataFSM_stateNext = dataFSM_MEM_WRITE_Y;
        end
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(when_DataFSM_l374) begin
            if(when_DataFSM_l380) begin
              dataFSM_stateNext = dataFSM_SET_ADDR;
            end else begin
              dataFSM_stateNext = dataFSM_NEXT_ROWS;
            end
          end else begin
            dataFSM_stateNext = dataFSM_MEM_ADDR_Y;
          end
        end
      end
      dataFSM_SET_ADDR : begin
        dataFSM_stateNext = dataFSM_LOAD_SLICE;
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
    if(dataFSM_wantStart) begin
      dataFSM_stateNext = dataFSM_IDLE;
    end
    if(dataFSM_wantKill) begin
      dataFSM_stateNext = dataFSM_BOOT;
    end
  end

  assign when_DataFSM_l123 = (! io_start);
  assign when_DataFSM_l150 = (io_start && (! io_done));
  assign when_DataFSM_l167 = (io_M <= _zz_when_DataFSM_l167);
  assign io_sq_rd_fire = (io_sq_rd_valid && io_sq_rd_ready);
  assign when_DataFSM_l206 = (io_axis_card_recv_tvalid && io_axis_card_recv_tready);
  assign when_DataFSM_l215 = (_zz_when_DataFSM_l215 <= cnt_K);
  assign _zz_3 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_4 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_5 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_6 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_7 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_8 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_9 = ({3'd0,1'b1} <<< cnt_row_value);
  assign _zz_10 = ({3'd0,1'b1} <<< cnt_row_value);
  assign when_DataFSM_l261 = ((3'b111 <= cnt_s_value) && (2'b11 <= cnt_row_value));
  assign when_DataFSM_l266 = (3'b111 <= cnt_s_value);
  assign when_DataFSM_l299 = (io_axis_card_recv_tvalid && io_axis_card_recv_tready);
  assign when_DataFSM_l308 = (cnt_entries_value < _zz_when_DataFSM_l308);
  assign when_DataFSM_l314 = (cnt_K < io_K);
  assign when_DataFSM_l334 = (dataFSM_waitCounter_value == 3'b011);
  assign io_sq_wr_fire = (io_sq_wr_valid && io_sq_wr_ready);
  assign io_cq_wr_fire = (io_cq_wr_valid && io_cq_wr_ready);
  assign when_DataFSM_l374 = (2'b11 <= cnt_unroll_Y_value);
  assign when_DataFSM_l380 = (cnt_N < io_N);
  assign dataFSM_onExit_BOOT = ((dataFSM_stateNext != dataFSM_BOOT) && (dataFSM_stateReg == dataFSM_BOOT));
  assign dataFSM_onExit_IDLE = ((dataFSM_stateNext != dataFSM_IDLE) && (dataFSM_stateReg == dataFSM_IDLE));
  assign dataFSM_onExit_NEXT_ROWS = ((dataFSM_stateNext != dataFSM_NEXT_ROWS) && (dataFSM_stateReg == dataFSM_NEXT_ROWS));
  assign dataFSM_onExit_LOAD_X_Buffer = ((dataFSM_stateNext != dataFSM_LOAD_X_Buffer) && (dataFSM_stateReg == dataFSM_LOAD_X_Buffer));
  assign dataFSM_onExit_LOAD_X_DATA = ((dataFSM_stateNext != dataFSM_LOAD_X_DATA) && (dataFSM_stateReg == dataFSM_LOAD_X_DATA));
  assign dataFSM_onExit_LOAD_SLICE = ((dataFSM_stateNext != dataFSM_LOAD_SLICE) && (dataFSM_stateReg == dataFSM_LOAD_SLICE));
  assign dataFSM_onExit_READ_W_AR = ((dataFSM_stateNext != dataFSM_READ_W_AR) && (dataFSM_stateReg == dataFSM_READ_W_AR));
  assign dataFSM_onExit_LOAD_W_DATA = ((dataFSM_stateNext != dataFSM_LOAD_W_DATA) && (dataFSM_stateReg == dataFSM_LOAD_W_DATA));
  assign dataFSM_onExit_WAIT_1 = ((dataFSM_stateNext != dataFSM_WAIT_1) && (dataFSM_stateReg == dataFSM_WAIT_1));
  assign dataFSM_onExit_MEM_ADDR_Y = ((dataFSM_stateNext != dataFSM_MEM_ADDR_Y) && (dataFSM_stateReg == dataFSM_MEM_ADDR_Y));
  assign dataFSM_onExit_MEM_WRITE_Y = ((dataFSM_stateNext != dataFSM_MEM_WRITE_Y) && (dataFSM_stateReg == dataFSM_MEM_WRITE_Y));
  assign dataFSM_onExit_SET_ADDR = ((dataFSM_stateNext != dataFSM_SET_ADDR) && (dataFSM_stateReg == dataFSM_SET_ADDR));
  assign dataFSM_onExit_WAIT_W = ((dataFSM_stateNext != dataFSM_WAIT_W) && (dataFSM_stateReg == dataFSM_WAIT_W));
  assign dataFSM_onEntry_BOOT = ((dataFSM_stateNext == dataFSM_BOOT) && (dataFSM_stateReg != dataFSM_BOOT));
  assign dataFSM_onEntry_IDLE = ((dataFSM_stateNext == dataFSM_IDLE) && (dataFSM_stateReg != dataFSM_IDLE));
  assign dataFSM_onEntry_NEXT_ROWS = ((dataFSM_stateNext == dataFSM_NEXT_ROWS) && (dataFSM_stateReg != dataFSM_NEXT_ROWS));
  assign dataFSM_onEntry_LOAD_X_Buffer = ((dataFSM_stateNext == dataFSM_LOAD_X_Buffer) && (dataFSM_stateReg != dataFSM_LOAD_X_Buffer));
  assign dataFSM_onEntry_LOAD_X_DATA = ((dataFSM_stateNext == dataFSM_LOAD_X_DATA) && (dataFSM_stateReg != dataFSM_LOAD_X_DATA));
  assign dataFSM_onEntry_LOAD_SLICE = ((dataFSM_stateNext == dataFSM_LOAD_SLICE) && (dataFSM_stateReg != dataFSM_LOAD_SLICE));
  assign dataFSM_onEntry_READ_W_AR = ((dataFSM_stateNext == dataFSM_READ_W_AR) && (dataFSM_stateReg != dataFSM_READ_W_AR));
  assign dataFSM_onEntry_LOAD_W_DATA = ((dataFSM_stateNext == dataFSM_LOAD_W_DATA) && (dataFSM_stateReg != dataFSM_LOAD_W_DATA));
  assign dataFSM_onEntry_WAIT_1 = ((dataFSM_stateNext == dataFSM_WAIT_1) && (dataFSM_stateReg != dataFSM_WAIT_1));
  assign dataFSM_onEntry_MEM_ADDR_Y = ((dataFSM_stateNext == dataFSM_MEM_ADDR_Y) && (dataFSM_stateReg != dataFSM_MEM_ADDR_Y));
  assign dataFSM_onEntry_MEM_WRITE_Y = ((dataFSM_stateNext == dataFSM_MEM_WRITE_Y) && (dataFSM_stateReg != dataFSM_MEM_WRITE_Y));
  assign dataFSM_onEntry_SET_ADDR = ((dataFSM_stateNext == dataFSM_SET_ADDR) && (dataFSM_stateReg != dataFSM_SET_ADDR));
  assign dataFSM_onEntry_WAIT_W = ((dataFSM_stateNext == dataFSM_WAIT_W) && (dataFSM_stateReg != dataFSM_WAIT_W));
  always @(posedge clk) begin
    if(!resetn) begin
      done <= 1'b0;
      cnt_entries_value <= 16'h0;
      cnt_beats_W_value <= 32'h0;
      cnt_unroll_Y_value <= 2'b00;
      cnt_unroll_rows_value <= 16'h0;
      k_c_value <= 16'h0;
      cnt_s_value <= 3'b000;
      cnt_row_value <= 2'b00;
      dataFSM_waitCounter_value <= 3'b000;
      dataFSM_stateReg <= dataFSM_BOOT;
    end else begin
      cnt_entries_value <= cnt_entries_valueNext;
      cnt_beats_W_value <= cnt_beats_W_valueNext;
      cnt_unroll_Y_value <= cnt_unroll_Y_valueNext;
      cnt_unroll_rows_value <= cnt_unroll_rows_valueNext;
      k_c_value <= k_c_valueNext;
      cnt_s_value <= cnt_s_valueNext;
      cnt_row_value <= cnt_row_valueNext;
      dataFSM_waitCounter_value <= dataFSM_waitCounter_valueNext;
      dataFSM_stateReg <= dataFSM_stateNext;
      case(dataFSM_stateReg)
        dataFSM_IDLE : begin
          if(when_DataFSM_l123) begin
            done <= 1'b0;
          end
        end
        dataFSM_NEXT_ROWS : begin
          if(when_DataFSM_l167) begin
            done <= 1'b1;
          end
        end
        dataFSM_LOAD_X_Buffer : begin
        end
        dataFSM_LOAD_X_DATA : begin
        end
        dataFSM_LOAD_SLICE : begin
        end
        dataFSM_READ_W_AR : begin
        end
        dataFSM_LOAD_W_DATA : begin
        end
        dataFSM_WAIT_1 : begin
        end
        dataFSM_MEM_ADDR_Y : begin
        end
        dataFSM_MEM_WRITE_Y : begin
        end
        dataFSM_SET_ADDR : begin
        end
        dataFSM_WAIT_W : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge clk) begin
    case(dataFSM_stateReg)
      dataFSM_IDLE : begin
        addr_r <= 9'h0;
        addr_w <= 9'h0;
        cnt_N <= 16'h0;
        cnt_M <= 16'h0;
        cnt_K <= 16'h0;
        cnt_N_write <= 16'h0;
      end
      dataFSM_NEXT_ROWS : begin
        cnt_M <= (cnt_M + 16'h0004);
        cnt_K <= 16'h0;
        cnt_N <= 16'h0;
      end
      dataFSM_LOAD_X_Buffer : begin
      end
      dataFSM_LOAD_X_DATA : begin
        addr_w <= _zz_addr_w[8:0];
        if(when_DataFSM_l206) begin
          cnt_K <= (cnt_K + 16'h0020);
          if(when_DataFSM_l215) begin
            cnt_K <= 16'h0;
          end
        end
        if(io_axis_card_recv_tlast) begin
          cnt_K <= 16'h0;
        end
      end
      dataFSM_LOAD_SLICE : begin
        if(when_DataFSM_l261) begin
          cnt_K <= (cnt_K + 16'h0100);
        end
      end
      dataFSM_READ_W_AR : begin
      end
      dataFSM_LOAD_W_DATA : begin
        if(io_done_acc) begin
          if(!when_DataFSM_l308) begin
            if(!when_DataFSM_l314) begin
              cnt_N <= (cnt_N + 16'h0020);
              cnt_K <= 16'h0;
            end
          end
        end
      end
      dataFSM_WAIT_1 : begin
      end
      dataFSM_MEM_ADDR_Y : begin
      end
      dataFSM_MEM_WRITE_Y : begin
        if(io_cq_wr_fire) begin
          if(when_DataFSM_l374) begin
            if(when_DataFSM_l380) begin
              cnt_N_write <= (cnt_N_write + 16'h0020);
            end else begin
              cnt_N_write <= 16'h0;
            end
          end
        end
      end
      dataFSM_SET_ADDR : begin
        addr_r <= _zz_addr_r[8:0];
      end
      dataFSM_WAIT_W : begin
      end
      default : begin
      end
    endcase
  end


endmodule
